{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Handsdown API Index Auto-generated documentation index. A full list of Handsdown project modules. To add custom content to this file, create HANDSDOWN.md in your project root. Examples PEP 484 - comment-based type annotations examples Supported expressions examples Google docstrings examples Main Example PEP 257 - PEP 257 and Google docstrings examples Stub file type annotations examples PEP 287 - reStructuredText docstrings examples Sphinx docstrings examples PEP 484 - type annotations examples Handsdown Module AST Parser Analyzers BaseAnalyzer ClassAnalyzer ExpressionAnalyzer FunctionAnalyzer ModuleAnalyzer ModuleRecordList Node Records ArgumentRecord AttributeRecord ClassRecord ExpressionRecord FunctionRecord ImportRecord ModuleRecord NodeRecord TextRecord Smart Ast Type Defs Cli Parser Constants Exceptions Generators Base Material Rtd JinjaManager Loader Main MDDocument Processors Base Docstring Processor PEP 257 Docstring Processor reStructuredText Docstring Processor Section SectionBlock SectionMap Smart Utils Blackify DocstringFormatter ImportString IndentTrimmer Logger Markdown NicePath PathFinder Strings","title":"Handsdown API Index"},{"location":"#handsdown-api-index","text":"Auto-generated documentation index. A full list of Handsdown project modules. To add custom content to this file, create HANDSDOWN.md in your project root. Examples PEP 484 - comment-based type annotations examples Supported expressions examples Google docstrings examples Main Example PEP 257 - PEP 257 and Google docstrings examples Stub file type annotations examples PEP 287 - reStructuredText docstrings examples Sphinx docstrings examples PEP 484 - type annotations examples Handsdown Module AST Parser Analyzers BaseAnalyzer ClassAnalyzer ExpressionAnalyzer FunctionAnalyzer ModuleAnalyzer ModuleRecordList Node Records ArgumentRecord AttributeRecord ClassRecord ExpressionRecord FunctionRecord ImportRecord ModuleRecord NodeRecord TextRecord Smart Ast Type Defs Cli Parser Constants Exceptions Generators Base Material Rtd JinjaManager Loader Main MDDocument Processors Base Docstring Processor PEP 257 Docstring Processor reStructuredText Docstring Processor Section SectionBlock SectionMap Smart Utils Blackify DocstringFormatter ImportString IndentTrimmer Logger Markdown NicePath PathFinder Strings","title":"Handsdown API Index"},{"location":"examples/","text":"Examples Handsdown API Index / Examples Auto-generated documentation for examples module. Modules PEP 484 - comment-based type annotations examples Supported expressions examples Google docstrings examples Main Example PEP 257 - PEP 257 and Google docstrings examples Stub file type annotations examples PEP 287 - reStructuredText docstrings examples Sphinx docstrings examples PEP 484 - type annotations examples","title":"Examples"},{"location":"examples/#examples","text":"Handsdown API Index / Examples Auto-generated documentation for examples module.","title":"Examples"},{"location":"examples/#modules","text":"PEP 484 - comment-based type annotations examples Supported expressions examples Google docstrings examples Main Example PEP 257 - PEP 257 and Google docstrings examples Stub file type annotations examples PEP 287 - reStructuredText docstrings examples Sphinx docstrings examples PEP 484 - type annotations examples","title":"Modules"},{"location":"examples/comment_typed/","text":"PEP 484 - comment-based type annotations examples Handsdown API Index / Examples / PEP 484 - comment-based type annotations examples Auto-generated documentation for examples.comment_typed module. MyValue find in source code Signature class MyValue : def __init__ ( self , * args , ** kwargs ) -> None : ... Typed find in source code Attributes two - comment here: 2 Signature class Typed : def __init__ ( self , my_bool : bool = one & ~ two == \"three\" and not - 4 , my_lambda = lambda x , y , * args , ** kwargs ,: x + y , my_set : Set = { 1 , 2 , [ 3 , 4 ], { 5 : 6 }, ( 7 , 8 )}, _value : Union [ List [ str ], str , MyValue ] = MyValue ( \"asd\" , * args , kwarg = 123 , ** extras ), _name : str = \"default\" , ) -> None : ... See also MyValue Typed.classmethod find in source code Signature @classmethod def classmethod ( cls , _my_value : MyValue , * _args : str , ** _kwargs : Any ) -> Typed : ... See also MyValue func find in source code Signature def func ( _list : Tuple [ List [ str ], ... ], _my_value_cls : Type [ MyValue ] = MyValue , ** _kwargs : None ) -> Any : ... See also MyValue func_any find in source code Signature def func_any ( _list : Tuple [ List [ str ], ... ], _my_value_cls : Any = MyValue , ** _kwargs : None ) -> Any : ... See also MyValue","title":"PEP 484 - comment-based type annotations examples"},{"location":"examples/comment_typed/#pep-484-comment-based-type-annotations-examples","text":"Handsdown API Index / Examples / PEP 484 - comment-based type annotations examples Auto-generated documentation for examples.comment_typed module.","title":"PEP 484 - comment-based type annotations examples"},{"location":"examples/comment_typed/#myvalue","text":"find in source code","title":"MyValue"},{"location":"examples/comment_typed/#signature","text":"class MyValue : def __init__ ( self , * args , ** kwargs ) -> None : ...","title":"Signature"},{"location":"examples/comment_typed/#typed","text":"find in source code","title":"Typed"},{"location":"examples/comment_typed/#attributes","text":"two - comment here: 2","title":"Attributes"},{"location":"examples/comment_typed/#signature_1","text":"class Typed : def __init__ ( self , my_bool : bool = one & ~ two == \"three\" and not - 4 , my_lambda = lambda x , y , * args , ** kwargs ,: x + y , my_set : Set = { 1 , 2 , [ 3 , 4 ], { 5 : 6 }, ( 7 , 8 )}, _value : Union [ List [ str ], str , MyValue ] = MyValue ( \"asd\" , * args , kwarg = 123 , ** extras ), _name : str = \"default\" , ) -> None : ...","title":"Signature"},{"location":"examples/comment_typed/#see-also","text":"MyValue","title":"See also"},{"location":"examples/comment_typed/#typedclassmethod","text":"find in source code","title":"Typed.classmethod"},{"location":"examples/comment_typed/#signature_2","text":"@classmethod def classmethod ( cls , _my_value : MyValue , * _args : str , ** _kwargs : Any ) -> Typed : ...","title":"Signature"},{"location":"examples/comment_typed/#see-also_1","text":"MyValue","title":"See also"},{"location":"examples/comment_typed/#func","text":"find in source code","title":"func"},{"location":"examples/comment_typed/#signature_3","text":"def func ( _list : Tuple [ List [ str ], ... ], _my_value_cls : Type [ MyValue ] = MyValue , ** _kwargs : None ) -> Any : ...","title":"Signature"},{"location":"examples/comment_typed/#see-also_2","text":"MyValue","title":"See also"},{"location":"examples/comment_typed/#func_any","text":"find in source code","title":"func_any"},{"location":"examples/comment_typed/#signature_4","text":"def func_any ( _list : Tuple [ List [ str ], ... ], _my_value_cls : Any = MyValue , ** _kwargs : None ) -> Any : ...","title":"Signature"},{"location":"examples/comment_typed/#see-also_3","text":"MyValue","title":"See also"},{"location":"examples/expressions/","text":"Supported expressions examples Handsdown API Index / Examples / Supported expressions examples Auto-generated documentation for examples.expressions module. Attributes STRING - string example: 'string' BSTRING - bytes example: b'string' RSTRING - r-string example: 'str\\\\ing' JOINED_STRING - joined string example: 'part1part2' FSTRING - f-string example: f'start{STRING}end' SLICE - slice example: STRING[1:4:-1] SET - set example: {1, 2, 3} LIST - list example: [1, 2, 3] TUPLE - tuple example: (1, 2, 3) DICT - dict example: (1, 2, 3) DICT_COMP - dict comprehension example: {k: 1 for k in range(3) if k > -10} LIST_COMP - list comprehension example: [k + 1 for k in range(3)] SET_COMP - set comprehension example: {k + 1 for k in range(3)} GEN_EXPR - generator expression example: (k + 1 for k in range(3)) IF_EXPR - if expression example: 5 if STRING else 6 AWAIT - await example: await STRING","title":"Supported expressions examples"},{"location":"examples/expressions/#supported-expressions-examples","text":"Handsdown API Index / Examples / Supported expressions examples Auto-generated documentation for examples.expressions module.","title":"Supported expressions examples"},{"location":"examples/expressions/#attributes","text":"STRING - string example: 'string' BSTRING - bytes example: b'string' RSTRING - r-string example: 'str\\\\ing' JOINED_STRING - joined string example: 'part1part2' FSTRING - f-string example: f'start{STRING}end' SLICE - slice example: STRING[1:4:-1] SET - set example: {1, 2, 3} LIST - list example: [1, 2, 3] TUPLE - tuple example: (1, 2, 3) DICT - dict example: (1, 2, 3) DICT_COMP - dict comprehension example: {k: 1 for k in range(3) if k > -10} LIST_COMP - list comprehension example: [k + 1 for k in range(3)] SET_COMP - set comprehension example: {k + 1 for k in range(3)} GEN_EXPR - generator expression example: (k + 1 for k in range(3)) IF_EXPR - if expression example: 5 if STRING else 6 AWAIT - await example: await STRING","title":"Attributes"},{"location":"examples/google_docstrings/","text":"Google docstrings examples Handsdown API Index / Examples / Google docstrings examples Auto-generated documentation for examples.google_docstrings module. ClassExample find in source code Google-style class example Attributes attr1 str - Description of attr1 . attr2 :obj: int , optional - Description of attr2 . Signature class ClassExample : ... ClassExample().method_example find in source code Summary line. Extended description of method. Examples Examples should be written in doctest format, and should illustrate how to use the function >>> print ([ i for i in ... example_generator ( 2 )]) [ 'one' , 'two' , ] >>> setup_env () >>> func_call ( ... first_name = 'test' , ... last_name = 'test' , ... ) Arguments text str, optional - Description of arg1 *args str - Description of args **kwargs str - Description of kwargs Returns int - Description of return value Signature def method_example ( self , text : str = \"hello\" ) -> int : ... function_example find in source code Summary line. Extended description of function. You can use this function like result = function_example ( { 'key' : 'value' , }, None , ) print result Arguments arg1 int - Description of arg1 arg2 str - Description of arg2 arg3 str, optional - Description of arg3 Returns bool - Description of return value Raises AttributeError - The Raises section is a list of all exceptions that are relevant to the interface. ValueError - If param2 is equal to param1 . Signature def function_example ( arg1 , arg2 , arg3 = None ): ... function_with_pep484_type_annotations find in source code Example function with PEP 484 type annotations. Arguments param1 - The first parameter. param2 - The second parameter. Returns The return value. True for success, False otherwise. Signature def function_with_pep484_type_annotations ( param1 : int , param2 : str ) -> bool : ...","title":"Google docstrings examples"},{"location":"examples/google_docstrings/#google-docstrings-examples","text":"Handsdown API Index / Examples / Google docstrings examples Auto-generated documentation for examples.google_docstrings module.","title":"Google docstrings examples"},{"location":"examples/google_docstrings/#classexample","text":"find in source code Google-style class example","title":"ClassExample"},{"location":"examples/google_docstrings/#attributes","text":"attr1 str - Description of attr1 . attr2 :obj: int , optional - Description of attr2 .","title":"Attributes"},{"location":"examples/google_docstrings/#signature","text":"class ClassExample : ...","title":"Signature"},{"location":"examples/google_docstrings/#classexamplemethod_example","text":"find in source code Summary line. Extended description of method.","title":"ClassExample().method_example"},{"location":"examples/google_docstrings/#examples","text":"Examples should be written in doctest format, and should illustrate how to use the function >>> print ([ i for i in ... example_generator ( 2 )]) [ 'one' , 'two' , ] >>> setup_env () >>> func_call ( ... first_name = 'test' , ... last_name = 'test' , ... )","title":"Examples"},{"location":"examples/google_docstrings/#arguments","text":"text str, optional - Description of arg1 *args str - Description of args **kwargs str - Description of kwargs","title":"Arguments"},{"location":"examples/google_docstrings/#returns","text":"int - Description of return value","title":"Returns"},{"location":"examples/google_docstrings/#signature_1","text":"def method_example ( self , text : str = \"hello\" ) -> int : ...","title":"Signature"},{"location":"examples/google_docstrings/#function_example","text":"find in source code Summary line. Extended description of function. You can use this function like result = function_example ( { 'key' : 'value' , }, None , ) print result","title":"function_example"},{"location":"examples/google_docstrings/#arguments_1","text":"arg1 int - Description of arg1 arg2 str - Description of arg2 arg3 str, optional - Description of arg3","title":"Arguments"},{"location":"examples/google_docstrings/#returns_1","text":"bool - Description of return value","title":"Returns"},{"location":"examples/google_docstrings/#raises","text":"AttributeError - The Raises section is a list of all exceptions that are relevant to the interface. ValueError - If param2 is equal to param1 .","title":"Raises"},{"location":"examples/google_docstrings/#signature_2","text":"def function_example ( arg1 , arg2 , arg3 = None ): ...","title":"Signature"},{"location":"examples/google_docstrings/#function_with_pep484_type_annotations","text":"find in source code Example function with PEP 484 type annotations.","title":"function_with_pep484_type_annotations"},{"location":"examples/google_docstrings/#arguments_2","text":"param1 - The first parameter. param2 - The second parameter.","title":"Arguments"},{"location":"examples/google_docstrings/#returns_2","text":"The return value. True for success, False otherwise.","title":"Returns"},{"location":"examples/google_docstrings/#signature_3","text":"def function_with_pep484_type_annotations ( param1 : int , param2 : str ) -> bool : ...","title":"Signature"},{"location":"examples/main_example/","text":"Main Example Handsdown API Index / Examples / Main Example Auto-generated documentation for examples.main_example module. Attributes MODULE_NAME - This is a comment-style documented global variable, so it is added to main_example module attributes with this comment as a documentation for it: 'My Module' MyClass find in source code Attributes STUFF_COUNT - This is a comment-style documented class attribute, so it is added to main_example.MyClass attributes with this comment as a documentation for it.: 3 MyClass documentation here. Notes This time we use RST docstrings format. Signature class MyClass ( BaseClass ): ... MyClass(). bool find in source code Magic methods are added to docs only if they have docstrings. Returns True if STUFF_COUNT is not zero Signature def __bool__ ( self ) -> bool : ... MyClass.do_something find in source code This is a public method that uses comment-style type annotations. If decorators or types from annotations are from your project, links to them will be added to See also section. Since this function depends on STUFF_COUNT , we can add it to a docstring in backticks and it will be transformed to a link. # usage example def my_stuff ( amount ): return amount > 5 MyClass . do_something ( my_stuff ) # False Notes Added in version 1.3 Deprecated in version 1.8 Changed in version 1.4 All these directives are added to Notes section and formatted in Sphinx-style. Arguments stuff - Function do execute. Returns stuff result. Signature @classmethod def do_something ( cls , stuff : StuffCallable ) -> bool : ... hello find in source code This is module function and it is added to documentation even if it does not have a docstring. Function signature will be also generated respecting regular and comment-style type annotations. Let's use PEP 257 format here. Examples # Google-style code block here, but we could use Markdown code block as well >>> hello ( 'John' ) 'Hello, John!' >>> hello ( '' ) 'Hello!' Arguments name - Name of the person to greet. Returns A greeting. No need to put types here if you use type annotations. Signature def hello ( name : str ) -> str : ...","title":"Main Example"},{"location":"examples/main_example/#main-example","text":"Handsdown API Index / Examples / Main Example Auto-generated documentation for examples.main_example module.","title":"Main Example"},{"location":"examples/main_example/#attributes","text":"MODULE_NAME - This is a comment-style documented global variable, so it is added to main_example module attributes with this comment as a documentation for it: 'My Module'","title":"Attributes"},{"location":"examples/main_example/#myclass","text":"find in source code","title":"MyClass"},{"location":"examples/main_example/#attributes_1","text":"STUFF_COUNT - This is a comment-style documented class attribute, so it is added to main_example.MyClass attributes with this comment as a documentation for it.: 3 MyClass documentation here.","title":"Attributes"},{"location":"examples/main_example/#notes","text":"This time we use RST docstrings format.","title":"Notes"},{"location":"examples/main_example/#signature","text":"class MyClass ( BaseClass ): ...","title":"Signature"},{"location":"examples/main_example/#myclassbool","text":"find in source code Magic methods are added to docs only if they have docstrings.","title":"MyClass().bool"},{"location":"examples/main_example/#returns","text":"True if STUFF_COUNT is not zero","title":"Returns"},{"location":"examples/main_example/#signature_1","text":"def __bool__ ( self ) -> bool : ...","title":"Signature"},{"location":"examples/main_example/#myclassdo_something","text":"find in source code This is a public method that uses comment-style type annotations. If decorators or types from annotations are from your project, links to them will be added to See also section. Since this function depends on STUFF_COUNT , we can add it to a docstring in backticks and it will be transformed to a link. # usage example def my_stuff ( amount ): return amount > 5 MyClass . do_something ( my_stuff ) # False","title":"MyClass.do_something"},{"location":"examples/main_example/#notes_1","text":"Added in version 1.3 Deprecated in version 1.8 Changed in version 1.4 All these directives are added to Notes section and formatted in Sphinx-style.","title":"Notes"},{"location":"examples/main_example/#arguments","text":"stuff - Function do execute.","title":"Arguments"},{"location":"examples/main_example/#returns_1","text":"stuff result.","title":"Returns"},{"location":"examples/main_example/#signature_2","text":"@classmethod def do_something ( cls , stuff : StuffCallable ) -> bool : ...","title":"Signature"},{"location":"examples/main_example/#hello","text":"find in source code This is module function and it is added to documentation even if it does not have a docstring. Function signature will be also generated respecting regular and comment-style type annotations. Let's use PEP 257 format here.","title":"hello"},{"location":"examples/main_example/#examples","text":"# Google-style code block here, but we could use Markdown code block as well >>> hello ( 'John' ) 'Hello, John!' >>> hello ( '' ) 'Hello!'","title":"Examples"},{"location":"examples/main_example/#arguments_1","text":"name - Name of the person to greet.","title":"Arguments"},{"location":"examples/main_example/#returns_2","text":"A greeting. No need to put types here if you use type annotations.","title":"Returns"},{"location":"examples/main_example/#signature_3","text":"def hello ( name : str ) -> str : ...","title":"Signature"},{"location":"examples/pep257_docstrings/","text":"PEP 257 - PEP 257 and Google docstrings examples Handsdown API Index / Examples / PEP 257 - PEP 257 and Google docstrings examples Auto-generated documentation for examples.pep257_docstrings module. ClassExample find in source code PEP257-style class example Attributes attr1 - Description of attr1 . attr2 - Description of attr2 . Example of a code block You can use ~~~ to start a block as well MD block example inside a tilde block ```python This is not a codeblock, test inside tildes rendered as it is ``` Signature class ClassExample : ... ClassExample().method_example find in source code Summary line. Extended description of method. Examples Examples should be written in doctest format, and should illustrate how to use the function. >>> print ([ i for i in ... example_generator ( 2 )]) [ 'one' , 'two' , ] >>> setup_env () >>> func_call ( ... first_name = 'test' , ... last_name = 'test' , ... ) Arguments text - Description of arg1 *args - Description of args **kwargs - Description of kwargs Returns Description of return value Signature def method_example ( self , text : str = \"hello\" ) -> int : ... function_example find in source code Form a complex number. Arguments real - the real part (default 0.0) imag - the imaginary part (default 0.0) Signature def function_example ( real = 0.0 , imag = 0.0 ): ...","title":"PEP 257 - PEP 257 and Google docstrings examples"},{"location":"examples/pep257_docstrings/#pep-257-pep-257-and-google-docstrings-examples","text":"Handsdown API Index / Examples / PEP 257 - PEP 257 and Google docstrings examples Auto-generated documentation for examples.pep257_docstrings module.","title":"PEP 257 - PEP 257 and Google docstrings examples"},{"location":"examples/pep257_docstrings/#classexample","text":"find in source code PEP257-style class example","title":"ClassExample"},{"location":"examples/pep257_docstrings/#attributes","text":"attr1 - Description of attr1 . attr2 - Description of attr2 . Example of a code block You can use ~~~ to start a block as well MD block example inside a tilde block ```python This is not a codeblock, test inside tildes rendered as it is ```","title":"Attributes"},{"location":"examples/pep257_docstrings/#signature","text":"class ClassExample : ...","title":"Signature"},{"location":"examples/pep257_docstrings/#classexamplemethod_example","text":"find in source code Summary line. Extended description of method.","title":"ClassExample().method_example"},{"location":"examples/pep257_docstrings/#examples","text":"Examples should be written in doctest format, and should illustrate how to use the function. >>> print ([ i for i in ... example_generator ( 2 )]) [ 'one' , 'two' , ] >>> setup_env () >>> func_call ( ... first_name = 'test' , ... last_name = 'test' , ... )","title":"Examples"},{"location":"examples/pep257_docstrings/#arguments","text":"text - Description of arg1 *args - Description of args **kwargs - Description of kwargs","title":"Arguments"},{"location":"examples/pep257_docstrings/#returns","text":"Description of return value","title":"Returns"},{"location":"examples/pep257_docstrings/#signature_1","text":"def method_example ( self , text : str = \"hello\" ) -> int : ...","title":"Signature"},{"location":"examples/pep257_docstrings/#function_example","text":"find in source code Form a complex number.","title":"function_example"},{"location":"examples/pep257_docstrings/#arguments_1","text":"real - the real part (default 0.0) imag - the imaginary part (default 0.0)","title":"Arguments"},{"location":"examples/pep257_docstrings/#signature_2","text":"def function_example ( real = 0.0 , imag = 0.0 ): ...","title":"Signature"},{"location":"examples/pyi_typed/","text":"Stub file type annotations examples Handsdown API Index / Examples / Stub file type annotations examples Auto-generated documentation for examples.pyi_typed module. MyValue find in source code Signature class MyValue : ... func find in source code Signature def func ( _list , _my_value_cls = MyValue , ** _kwargs ): ... See also MyValue func_any find in source code Signature def func_any ( _list , _my_value_cls = MyValue , ** _kwargs ): ... See also MyValue","title":"Stub file type annotations examples"},{"location":"examples/pyi_typed/#stub-file-type-annotations-examples","text":"Handsdown API Index / Examples / Stub file type annotations examples Auto-generated documentation for examples.pyi_typed module.","title":"Stub file type annotations examples"},{"location":"examples/pyi_typed/#myvalue","text":"find in source code","title":"MyValue"},{"location":"examples/pyi_typed/#signature","text":"class MyValue : ...","title":"Signature"},{"location":"examples/pyi_typed/#func","text":"find in source code","title":"func"},{"location":"examples/pyi_typed/#signature_1","text":"def func ( _list , _my_value_cls = MyValue , ** _kwargs ): ...","title":"Signature"},{"location":"examples/pyi_typed/#see-also","text":"MyValue","title":"See also"},{"location":"examples/pyi_typed/#func_any","text":"find in source code","title":"func_any"},{"location":"examples/pyi_typed/#signature_2","text":"def func_any ( _list , _my_value_cls = MyValue , ** _kwargs ): ...","title":"Signature"},{"location":"examples/pyi_typed/#see-also_1","text":"MyValue","title":"See also"},{"location":"examples/rst_docstrings/","text":"PEP 287 - reStructuredText docstrings examples Handsdown API Index / Examples / PEP 287 - reStructuredText docstrings examples Auto-generated documentation for examples.rst_docstrings module. RSTExample find in source code Signature class RSTExample : ... RSTExample.reference find in source code This is a reference for RST-style docstrings. Check source code to see how it works. Arguments my_param - Parameter example typed_param int - Typed parameter example Returns Type: str Return statement Raises ValueError - Raises example Code example data = { 'key' : 'value' , } print ( data ) Signature @staticmethod def reference (): ... RSTExample.replace_test find in source code Check if all attribute attributes , data and exception Exception in class RSTExample and class RSTExample look good. Signature @staticmethod def replace_test (): ... RSTExample.rtype_test find in source code :rtype: test. Returns Return statement Type: bool Signature @staticmethod def rtype_test (): ...","title":"PEP 287 - reStructuredText docstrings examples"},{"location":"examples/rst_docstrings/#pep-287-restructuredtext-docstrings-examples","text":"Handsdown API Index / Examples / PEP 287 - reStructuredText docstrings examples Auto-generated documentation for examples.rst_docstrings module.","title":"PEP 287 - reStructuredText docstrings examples"},{"location":"examples/rst_docstrings/#rstexample","text":"find in source code","title":"RSTExample"},{"location":"examples/rst_docstrings/#signature","text":"class RSTExample : ...","title":"Signature"},{"location":"examples/rst_docstrings/#rstexamplereference","text":"find in source code This is a reference for RST-style docstrings. Check source code to see how it works.","title":"RSTExample.reference"},{"location":"examples/rst_docstrings/#arguments","text":"my_param - Parameter example typed_param int - Typed parameter example","title":"Arguments"},{"location":"examples/rst_docstrings/#returns","text":"Type: str Return statement","title":"Returns"},{"location":"examples/rst_docstrings/#raises","text":"ValueError - Raises example Code example data = { 'key' : 'value' , } print ( data )","title":"Raises"},{"location":"examples/rst_docstrings/#signature_1","text":"@staticmethod def reference (): ...","title":"Signature"},{"location":"examples/rst_docstrings/#rstexamplereplace_test","text":"find in source code Check if all attribute attributes , data and exception Exception in class RSTExample and class RSTExample look good.","title":"RSTExample.replace_test"},{"location":"examples/rst_docstrings/#signature_2","text":"@staticmethod def replace_test (): ...","title":"Signature"},{"location":"examples/rst_docstrings/#rstexamplertype_test","text":"find in source code :rtype: test.","title":"RSTExample.rtype_test"},{"location":"examples/rst_docstrings/#returns_1","text":"Return statement Type: bool","title":"Returns"},{"location":"examples/rst_docstrings/#signature_3","text":"@staticmethod def rtype_test (): ...","title":"Signature"},{"location":"examples/sphinx_docstrings/","text":"Sphinx docstrings examples Handsdown API Index / Examples / Sphinx docstrings examples Auto-generated documentation for examples.sphinx_docstrings module. RSTExample find in source code Signature class RSTExample : ... RSTExample.directives_test find in source code Test for some random Sphinx directives def sum_eq_n? ( arr , n ) return true if arr . empty? && n == 0 arr . product ( arr ) . reject { | a , b | a == b } . any? { | a , b | a + b == n } end Notes short note ( a + b ) ^ 2 = a ^ 2 + 2 ab + b ^ 2 ( a - b ) ^ 2 = a ^ 2 - 2 ab + b ^ 2 See also modules mod: zipfile , mod: tarfile Signature @staticmethod def directives_test (): ... RSTExample.reference find in source code This is a reference for Sphinx-style RST-style docstrings. Check source code to see how it works. Code example data = { 'key' : 'value' , } print ( data ) Arguments my_param - Parameter example typed_param int - Typed parameter example Returns Type: str Return statement Raises ValueError - Raises example Signature @staticmethod def reference (): ... RSTExample.version_directives_test find in source code Test for Version-related directives Notes Added in version 2.5 The spam parameter. Changed in version 2.7 Mandatory spam parameter. Deprecated in version 3.1 Use :func: spam instead. Signature @staticmethod def version_directives_test (): ...","title":"Sphinx docstrings examples"},{"location":"examples/sphinx_docstrings/#sphinx-docstrings-examples","text":"Handsdown API Index / Examples / Sphinx docstrings examples Auto-generated documentation for examples.sphinx_docstrings module.","title":"Sphinx docstrings examples"},{"location":"examples/sphinx_docstrings/#rstexample","text":"find in source code","title":"RSTExample"},{"location":"examples/sphinx_docstrings/#signature","text":"class RSTExample : ...","title":"Signature"},{"location":"examples/sphinx_docstrings/#rstexampledirectives_test","text":"find in source code Test for some random Sphinx directives def sum_eq_n? ( arr , n ) return true if arr . empty? && n == 0 arr . product ( arr ) . reject { | a , b | a == b } . any? { | a , b | a + b == n } end","title":"RSTExample.directives_test"},{"location":"examples/sphinx_docstrings/#notes","text":"short note ( a + b ) ^ 2 = a ^ 2 + 2 ab + b ^ 2 ( a - b ) ^ 2 = a ^ 2 - 2 ab + b ^ 2","title":"Notes"},{"location":"examples/sphinx_docstrings/#see-also","text":"modules mod: zipfile , mod: tarfile","title":"See also"},{"location":"examples/sphinx_docstrings/#signature_1","text":"@staticmethod def directives_test (): ...","title":"Signature"},{"location":"examples/sphinx_docstrings/#rstexamplereference","text":"find in source code This is a reference for Sphinx-style RST-style docstrings. Check source code to see how it works. Code example data = { 'key' : 'value' , } print ( data )","title":"RSTExample.reference"},{"location":"examples/sphinx_docstrings/#arguments","text":"my_param - Parameter example typed_param int - Typed parameter example","title":"Arguments"},{"location":"examples/sphinx_docstrings/#returns","text":"Type: str Return statement","title":"Returns"},{"location":"examples/sphinx_docstrings/#raises","text":"ValueError - Raises example","title":"Raises"},{"location":"examples/sphinx_docstrings/#signature_2","text":"@staticmethod def reference (): ...","title":"Signature"},{"location":"examples/sphinx_docstrings/#rstexampleversion_directives_test","text":"find in source code Test for Version-related directives","title":"RSTExample.version_directives_test"},{"location":"examples/sphinx_docstrings/#notes_1","text":"Added in version 2.5 The spam parameter. Changed in version 2.7 Mandatory spam parameter. Deprecated in version 3.1 Use :func: spam instead.","title":"Notes"},{"location":"examples/sphinx_docstrings/#signature_3","text":"@staticmethod def version_directives_test (): ...","title":"Signature"},{"location":"examples/typed/","text":"PEP 484 - type annotations examples Handsdown API Index / Examples / PEP 484 - type annotations examples Auto-generated documentation for examples.typed module. MyValue find in source code Signature class MyValue : ... Typed find in source code Signature class Typed : def __init__ ( self , _value : Union [ List [ str ], str , MyValue ] = MyValue ( { \"key1\" : \"value1\" , \"key2\" : \"value2\" , \"key3\" : \"value3\" , \"key4\" : \"value4\" , \"key5\" : \"value5\" , \"key6\" : \"value6\" , } ), _name : str = \"default\" , ) -> Dict [ str , MyValue ]: ... See also MyValue Typed().async_method find in source code Signature async def async_method ( self , _value : str ) -> str : ... Typed.classmethod find in source code Signature @classmethod def classmethod ( cls , _my_value : MyValue , * _args : str , ** _kwargs : Any ) -> None : ... See also MyValue func find in source code Signature @my_deco ( key = \"value\" ) def func ( _list : Tuple [ List [ str ], ... ], _my_value_cls : Type [ MyValue ] = MyValue , ** _kwargs : None ) -> Optional [ MyValue ]: ... See also MyValue my_deco find in source code Signature def my_deco ( key ): ...","title":"PEP 484 - type annotations examples"},{"location":"examples/typed/#pep-484-type-annotations-examples","text":"Handsdown API Index / Examples / PEP 484 - type annotations examples Auto-generated documentation for examples.typed module.","title":"PEP 484 - type annotations examples"},{"location":"examples/typed/#myvalue","text":"find in source code","title":"MyValue"},{"location":"examples/typed/#signature","text":"class MyValue : ...","title":"Signature"},{"location":"examples/typed/#typed","text":"find in source code","title":"Typed"},{"location":"examples/typed/#signature_1","text":"class Typed : def __init__ ( self , _value : Union [ List [ str ], str , MyValue ] = MyValue ( { \"key1\" : \"value1\" , \"key2\" : \"value2\" , \"key3\" : \"value3\" , \"key4\" : \"value4\" , \"key5\" : \"value5\" , \"key6\" : \"value6\" , } ), _name : str = \"default\" , ) -> Dict [ str , MyValue ]: ...","title":"Signature"},{"location":"examples/typed/#see-also","text":"MyValue","title":"See also"},{"location":"examples/typed/#typedasync_method","text":"find in source code","title":"Typed().async_method"},{"location":"examples/typed/#signature_2","text":"async def async_method ( self , _value : str ) -> str : ...","title":"Signature"},{"location":"examples/typed/#typedclassmethod","text":"find in source code","title":"Typed.classmethod"},{"location":"examples/typed/#signature_3","text":"@classmethod def classmethod ( cls , _my_value : MyValue , * _args : str , ** _kwargs : Any ) -> None : ...","title":"Signature"},{"location":"examples/typed/#see-also_1","text":"MyValue","title":"See also"},{"location":"examples/typed/#func","text":"find in source code","title":"func"},{"location":"examples/typed/#signature_4","text":"@my_deco ( key = \"value\" ) def func ( _list : Tuple [ List [ str ], ... ], _my_value_cls : Type [ MyValue ] = MyValue , ** _kwargs : None ) -> Optional [ MyValue ]: ...","title":"Signature"},{"location":"examples/typed/#see-also_2","text":"MyValue","title":"See also"},{"location":"examples/typed/#my_deco","text":"find in source code","title":"my_deco"},{"location":"examples/typed/#signature_5","text":"def my_deco ( key ): ...","title":"Signature"},{"location":"handsdown/","text":"Handsdown Handsdown API Index / Handsdown Auto-generated documentation for handsdown module. Modules Module AST Parser Cli Parser Constants Exceptions Generators JinjaManager Loader Main MDDocument Processors Utils","title":"Handsdown"},{"location":"handsdown/#handsdown","text":"Handsdown API Index / Handsdown Auto-generated documentation for handsdown module.","title":"Handsdown"},{"location":"handsdown/#modules","text":"Module AST Parser Cli Parser Constants Exceptions Generators JinjaManager Loader Main MDDocument Processors Utils","title":"Modules"},{"location":"handsdown/cli_parser/","text":"Cli Parser Handsdown API Index / Handsdown / Cli Parser Auto-generated documentation for handsdown.cli_parser module. CLINamespace find in source code Main CLI Namespace. Signature class CLINamespace : ... CLINamespace().get_source_code_url find in source code Get URL to source code. Returns URL as a string. Signature def get_source_code_url ( self ) -> str : ... abs_path find in source code Validate path_str and make it absolute. Arguments path_str - A path to check. Returns An absolute path. Signature def abs_path ( path_str : str ) -> NicePath : ... See also NicePath dir_abs_path find in source code Validate directory path_str and make it absolute. Arguments path_str - A path to check. Returns An absolute path. Raises argparse.ArgumentTypeError - If path is not a directory. Signature def dir_abs_path ( path_str : str ) -> NicePath : ... See also NicePath existing_dir_abs_path find in source code Validate existing directory path_str and make it absolute. Arguments path_str - A path to check. Returns An absolute path. Raises argparse.ArgumentTypeError - If path does not exist or is not a directory. Signature def existing_dir_abs_path ( path_str : str ) -> NicePath : ... See also NicePath git_repo find in source code Validate git_repo_url to be a GitHub repo and converts SSH urls to HTTPS. Arguments git_repo_url - GitHub URL or remote.origin.url Returns A GitHub URL. Signature def git_repo ( git_repo_url : str ) -> str : ... parse_args find in source code Get CLI arguments parser. Returns An argparse.ArgumentParser instance. Signature def parse_args ( args : Iterable [ str ]) -> CLINamespace : ... See also CLINamespace parse_theme find in source code Cast theme name to Theme . Signature def parse_theme ( name : str ) -> Theme : ... See also Theme","title":"Cli Parser"},{"location":"handsdown/cli_parser/#cli-parser","text":"Handsdown API Index / Handsdown / Cli Parser Auto-generated documentation for handsdown.cli_parser module.","title":"Cli Parser"},{"location":"handsdown/cli_parser/#clinamespace","text":"find in source code Main CLI Namespace.","title":"CLINamespace"},{"location":"handsdown/cli_parser/#signature","text":"class CLINamespace : ...","title":"Signature"},{"location":"handsdown/cli_parser/#clinamespaceget_source_code_url","text":"find in source code Get URL to source code.","title":"CLINamespace().get_source_code_url"},{"location":"handsdown/cli_parser/#returns","text":"URL as a string.","title":"Returns"},{"location":"handsdown/cli_parser/#signature_1","text":"def get_source_code_url ( self ) -> str : ...","title":"Signature"},{"location":"handsdown/cli_parser/#abs_path","text":"find in source code Validate path_str and make it absolute.","title":"abs_path"},{"location":"handsdown/cli_parser/#arguments","text":"path_str - A path to check.","title":"Arguments"},{"location":"handsdown/cli_parser/#returns_1","text":"An absolute path.","title":"Returns"},{"location":"handsdown/cli_parser/#signature_2","text":"def abs_path ( path_str : str ) -> NicePath : ...","title":"Signature"},{"location":"handsdown/cli_parser/#see-also","text":"NicePath","title":"See also"},{"location":"handsdown/cli_parser/#dir_abs_path","text":"find in source code Validate directory path_str and make it absolute.","title":"dir_abs_path"},{"location":"handsdown/cli_parser/#arguments_1","text":"path_str - A path to check.","title":"Arguments"},{"location":"handsdown/cli_parser/#returns_2","text":"An absolute path.","title":"Returns"},{"location":"handsdown/cli_parser/#raises","text":"argparse.ArgumentTypeError - If path is not a directory.","title":"Raises"},{"location":"handsdown/cli_parser/#signature_3","text":"def dir_abs_path ( path_str : str ) -> NicePath : ...","title":"Signature"},{"location":"handsdown/cli_parser/#see-also_1","text":"NicePath","title":"See also"},{"location":"handsdown/cli_parser/#existing_dir_abs_path","text":"find in source code Validate existing directory path_str and make it absolute.","title":"existing_dir_abs_path"},{"location":"handsdown/cli_parser/#arguments_2","text":"path_str - A path to check.","title":"Arguments"},{"location":"handsdown/cli_parser/#returns_3","text":"An absolute path.","title":"Returns"},{"location":"handsdown/cli_parser/#raises_1","text":"argparse.ArgumentTypeError - If path does not exist or is not a directory.","title":"Raises"},{"location":"handsdown/cli_parser/#signature_4","text":"def existing_dir_abs_path ( path_str : str ) -> NicePath : ...","title":"Signature"},{"location":"handsdown/cli_parser/#see-also_2","text":"NicePath","title":"See also"},{"location":"handsdown/cli_parser/#git_repo","text":"find in source code Validate git_repo_url to be a GitHub repo and converts SSH urls to HTTPS.","title":"git_repo"},{"location":"handsdown/cli_parser/#arguments_3","text":"git_repo_url - GitHub URL or remote.origin.url","title":"Arguments"},{"location":"handsdown/cli_parser/#returns_4","text":"A GitHub URL.","title":"Returns"},{"location":"handsdown/cli_parser/#signature_5","text":"def git_repo ( git_repo_url : str ) -> str : ...","title":"Signature"},{"location":"handsdown/cli_parser/#parse_args","text":"find in source code Get CLI arguments parser.","title":"parse_args"},{"location":"handsdown/cli_parser/#returns_5","text":"An argparse.ArgumentParser instance.","title":"Returns"},{"location":"handsdown/cli_parser/#signature_6","text":"def parse_args ( args : Iterable [ str ]) -> CLINamespace : ...","title":"Signature"},{"location":"handsdown/cli_parser/#see-also_3","text":"CLINamespace","title":"See also"},{"location":"handsdown/cli_parser/#parse_theme","text":"find in source code Cast theme name to Theme .","title":"parse_theme"},{"location":"handsdown/cli_parser/#signature_7","text":"def parse_theme ( name : str ) -> Theme : ...","title":"Signature"},{"location":"handsdown/cli_parser/#see-also_4","text":"Theme","title":"See also"},{"location":"handsdown/constants/","text":"Constants Handsdown API Index / Handsdown / Constants Auto-generated documentation for handsdown.constants module. Attributes LOGGER_NAME - Global logging.Logger name.: 'handsdown' EXCLUDE_EXPRS - Paths to exclude from docs generation.: ['build/*', 'tests/*', 'test/*', '*/__pycache__/*', '.*/*'] SOURCES_GLOB - glob.glob expression to ind all Python sources in current directory.: '**/*.py' ENCODING - Default encoding for source files: 'utf-8' Theme find in source code Signature class Theme ( enum . Enum ): ...","title":"Constants"},{"location":"handsdown/constants/#constants","text":"Handsdown API Index / Handsdown / Constants Auto-generated documentation for handsdown.constants module.","title":"Constants"},{"location":"handsdown/constants/#attributes","text":"LOGGER_NAME - Global logging.Logger name.: 'handsdown' EXCLUDE_EXPRS - Paths to exclude from docs generation.: ['build/*', 'tests/*', 'test/*', '*/__pycache__/*', '.*/*'] SOURCES_GLOB - glob.glob expression to ind all Python sources in current directory.: '**/*.py' ENCODING - Default encoding for source files: 'utf-8'","title":"Attributes"},{"location":"handsdown/constants/#theme","text":"find in source code","title":"Theme"},{"location":"handsdown/constants/#signature","text":"class Theme ( enum . Enum ): ...","title":"Signature"},{"location":"handsdown/exceptions/","text":"Exceptions Handsdown API Index / Handsdown / Exceptions Auto-generated documentation for handsdown.exceptions module. GeneratorError find in source code Main error for BaseGenerator . Signature class GeneratorError ( Exception ): ... ImportStringError find in source code Main error for ImportString . Signature class ImportStringError ( Exception ): ... LoaderError find in source code Main error for Loader . Signature class LoaderError ( Exception ): ... ParserError find in source code Main error for source code parsing issues. Signature class ParserError ( Exception ): ... PathFinderError find in source code Main error for PathFinder . Signature class PathFinderError ( Exception ): ...","title":"Exceptions"},{"location":"handsdown/exceptions/#exceptions","text":"Handsdown API Index / Handsdown / Exceptions Auto-generated documentation for handsdown.exceptions module.","title":"Exceptions"},{"location":"handsdown/exceptions/#generatorerror","text":"find in source code Main error for BaseGenerator .","title":"GeneratorError"},{"location":"handsdown/exceptions/#signature","text":"class GeneratorError ( Exception ): ...","title":"Signature"},{"location":"handsdown/exceptions/#importstringerror","text":"find in source code Main error for ImportString .","title":"ImportStringError"},{"location":"handsdown/exceptions/#signature_1","text":"class ImportStringError ( Exception ): ...","title":"Signature"},{"location":"handsdown/exceptions/#loadererror","text":"find in source code Main error for Loader .","title":"LoaderError"},{"location":"handsdown/exceptions/#signature_2","text":"class LoaderError ( Exception ): ...","title":"Signature"},{"location":"handsdown/exceptions/#parsererror","text":"find in source code Main error for source code parsing issues.","title":"ParserError"},{"location":"handsdown/exceptions/#signature_3","text":"class ParserError ( Exception ): ...","title":"Signature"},{"location":"handsdown/exceptions/#pathfindererror","text":"find in source code Main error for PathFinder .","title":"PathFinderError"},{"location":"handsdown/exceptions/#signature_4","text":"class PathFinderError ( Exception ): ...","title":"Signature"},{"location":"handsdown/jinja_manager/","text":"JinjaManager Handsdown API Index / Handsdown / JinjaManager Auto-generated documentation for handsdown.jinja_manager module. JinjaManager find in source code Jinja2 Environment manager. Signature class JinjaManager : def __init__ ( self ) -> None : ... JinjaManager().env find in source code Get jinja2.Environment . Signature @property def env ( self ) -> jinja2 . Environment : ... JinjaManager.escape_md find in source code Escape underscore characters. Signature @staticmethod def escape_md ( value : str ) -> str : ... JinjaManager().render find in source code Signature def render ( self , template_path : Path , ** kwargs : Any ) -> str : ... JinjaManager.update_globals find in source code Update global variables in jinja2.Environment . Arguments kwargs - Globals to set. Signature @classmethod def update_globals ( cls , ** kwargs : object ) -> None : ...","title":"JinjaManager"},{"location":"handsdown/jinja_manager/#jinjamanager","text":"Handsdown API Index / Handsdown / JinjaManager Auto-generated documentation for handsdown.jinja_manager module.","title":"JinjaManager"},{"location":"handsdown/jinja_manager/#jinjamanager_1","text":"find in source code Jinja2 Environment manager.","title":"JinjaManager"},{"location":"handsdown/jinja_manager/#signature","text":"class JinjaManager : def __init__ ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/jinja_manager/#jinjamanagerenv","text":"find in source code Get jinja2.Environment .","title":"JinjaManager().env"},{"location":"handsdown/jinja_manager/#signature_1","text":"@property def env ( self ) -> jinja2 . Environment : ...","title":"Signature"},{"location":"handsdown/jinja_manager/#jinjamanagerescape_md","text":"find in source code Escape underscore characters.","title":"JinjaManager.escape_md"},{"location":"handsdown/jinja_manager/#signature_2","text":"@staticmethod def escape_md ( value : str ) -> str : ...","title":"Signature"},{"location":"handsdown/jinja_manager/#jinjamanagerrender","text":"find in source code","title":"JinjaManager().render"},{"location":"handsdown/jinja_manager/#signature_3","text":"def render ( self , template_path : Path , ** kwargs : Any ) -> str : ...","title":"Signature"},{"location":"handsdown/jinja_manager/#jinjamanagerupdate_globals","text":"find in source code Update global variables in jinja2.Environment .","title":"JinjaManager.update_globals"},{"location":"handsdown/jinja_manager/#arguments","text":"kwargs - Globals to set.","title":"Arguments"},{"location":"handsdown/jinja_manager/#signature_4","text":"@classmethod def update_globals ( cls , ** kwargs : object ) -> None : ...","title":"Signature"},{"location":"handsdown/loader/","text":"Loader Handsdown API Index / Handsdown / Loader Auto-generated documentation for handsdown.loader module. Loader find in source code Loader for python source code. Examples loader = Loader ( Path ( 'path/to/my_module/' )) my_module_utils = loader . import_module ( 'my_module.utils' ) Arguments root_path - Root path of the project. output_path - Docs output path. encoding - File encoding. Signature class Loader : def __init__ ( self , root_path : Path , output_path : Path , encoding : str = ENCODING ) -> None : ... See also ENCODING Loader().get_import_string find in source code Get Python import string for a source source_path relative to root_path . Examples loader = Loader ( root_path = Path ( \"/root\" ), ... ) loader . get_import_string ( '/root/my_module/test.py' ) 'my_module.test' loader . get_import_string ( '/root/my_module/__init__.py' ) 'my_module' Arguments source_path - Path to a source file. Returns A Python import string. Signature def get_import_string ( self , source_path : Path ) -> str : ... Loader().get_module_record find in source code Build ModuleRecord for given source_path . Arguments source_path - Absolute path to source file. Returns A new ModuleRecord instance or None if there is ntohing to import. Raises LoaderError - If python source cannot be loaded. Signature def get_module_record ( self , source_path : Path ) -> Optional [ ModuleRecord ]: ... Loader.parse_module_record find in source code Parse ModuleRecord children and fully load a tree for it. Raises LoaderError - If python source cannot be parsed. Signature @staticmethod def parse_module_record ( module_record : ModuleRecord ) -> None : ... See also ModuleRecord","title":"Loader"},{"location":"handsdown/loader/#loader","text":"Handsdown API Index / Handsdown / Loader Auto-generated documentation for handsdown.loader module.","title":"Loader"},{"location":"handsdown/loader/#loader_1","text":"find in source code Loader for python source code.","title":"Loader"},{"location":"handsdown/loader/#examples","text":"loader = Loader ( Path ( 'path/to/my_module/' )) my_module_utils = loader . import_module ( 'my_module.utils' )","title":"Examples"},{"location":"handsdown/loader/#arguments","text":"root_path - Root path of the project. output_path - Docs output path. encoding - File encoding.","title":"Arguments"},{"location":"handsdown/loader/#signature","text":"class Loader : def __init__ ( self , root_path : Path , output_path : Path , encoding : str = ENCODING ) -> None : ...","title":"Signature"},{"location":"handsdown/loader/#see-also","text":"ENCODING","title":"See also"},{"location":"handsdown/loader/#loaderget_import_string","text":"find in source code Get Python import string for a source source_path relative to root_path .","title":"Loader().get_import_string"},{"location":"handsdown/loader/#examples_1","text":"loader = Loader ( root_path = Path ( \"/root\" ), ... ) loader . get_import_string ( '/root/my_module/test.py' ) 'my_module.test' loader . get_import_string ( '/root/my_module/__init__.py' ) 'my_module'","title":"Examples"},{"location":"handsdown/loader/#arguments_1","text":"source_path - Path to a source file.","title":"Arguments"},{"location":"handsdown/loader/#returns","text":"A Python import string.","title":"Returns"},{"location":"handsdown/loader/#signature_1","text":"def get_import_string ( self , source_path : Path ) -> str : ...","title":"Signature"},{"location":"handsdown/loader/#loaderget_module_record","text":"find in source code Build ModuleRecord for given source_path .","title":"Loader().get_module_record"},{"location":"handsdown/loader/#arguments_2","text":"source_path - Absolute path to source file.","title":"Arguments"},{"location":"handsdown/loader/#returns_1","text":"A new ModuleRecord instance or None if there is ntohing to import.","title":"Returns"},{"location":"handsdown/loader/#raises","text":"LoaderError - If python source cannot be loaded.","title":"Raises"},{"location":"handsdown/loader/#signature_2","text":"def get_module_record ( self , source_path : Path ) -> Optional [ ModuleRecord ]: ...","title":"Signature"},{"location":"handsdown/loader/#loaderparse_module_record","text":"find in source code Parse ModuleRecord children and fully load a tree for it.","title":"Loader.parse_module_record"},{"location":"handsdown/loader/#raises_1","text":"LoaderError - If python source cannot be parsed.","title":"Raises"},{"location":"handsdown/loader/#signature_3","text":"@staticmethod def parse_module_record ( module_record : ModuleRecord ) -> None : ...","title":"Signature"},{"location":"handsdown/loader/#see-also_1","text":"ModuleRecord","title":"See also"},{"location":"handsdown/main/","text":"Main Handsdown API Index / Handsdown / Main Auto-generated documentation for handsdown.main module. api find in source code Signature def api ( args : CLINamespace ) -> None : ... See also CLINamespace main find in source code Main entrypoint for CLI. Signature def main () -> None : ...","title":"Main"},{"location":"handsdown/main/#main","text":"Handsdown API Index / Handsdown / Main Auto-generated documentation for handsdown.main module.","title":"Main"},{"location":"handsdown/main/#api","text":"find in source code","title":"api"},{"location":"handsdown/main/#signature","text":"def api ( args : CLINamespace ) -> None : ...","title":"Signature"},{"location":"handsdown/main/#see-also","text":"CLINamespace","title":"See also"},{"location":"handsdown/main/#main_1","text":"find in source code Main entrypoint for CLI.","title":"main"},{"location":"handsdown/main/#signature_1","text":"def main () -> None : ...","title":"Signature"},{"location":"handsdown/md_document/","text":"MDDocument Handsdown API Index / Handsdown / MDDocument Auto-generated documentation for handsdown.md_document module. MDDocument find in source code Markdown file builder. Can be used as a context manager, on exit context is written to path . Examples md_doc = MDDocument ( path = Path ( 'output.md' )) md_doc . append ( '## New section' ) md_doc . append ( 'some content' ) md_doc . title = 'My doc' md_doc . write () # output is indented for readability Path ( 'output.md' ) . read_text () '''# My doc - [My doc](#my-doc) - [New section](#new-section) ## New section some content ''' with MDDocument ( path = Path ( 'output.md' )) as md_document : md_document . title = 'My doc' md_doc . append_title ( 'New section' , level = 2 ) md_doc . append ( 'New line' ) Arguments path - Path to store document. Signature class MDDocument : def __init__ ( self , path : Path , encoding : str = ENCODING ) -> None : ... See also ENCODING MDDocument().append find in source code Append content to the document. Handle trimming and sectioning the content and update MDDocument().title and MDDocument().toc_section fields. Arguments content - Text to add. Signature def append ( self , content : str ) -> None : ... MDDocument.get_anchor find in source code Convert title to a GitHub-friendly anchor link. Returns A test of anchor link. Signature @classmethod def get_anchor ( cls , title : str ) -> str : ... MDDocument().get_doc_link find in source code Get Markdown link to a local MD document, use relative path as a link. Arguments MDDocument().path - Path to local MDDocument anchor - Unescaped or escaped anchor tag Returns A string with Markdown link. Signature def get_doc_link ( self , path : Path , anchor : str = \"\" ) -> str : ... MDDocument.is_toc find in source code Check if the section is Tree of Contents. Returns True the section is ToC. Signature @staticmethod def is_toc ( section : str ) -> bool : ... MDDocument().path find in source code Output path of the document. Signature @property def path ( self ) -> NicePath : ... See also NicePath MDDocument().read find in source code Read and parse content from source_path . Arguments source_path - Input file path. If not provided - MDDocument().path is used. encoding - File encoding. Signature def read ( self , source_path : Optional [ Path ] = None ) -> None : ... MDDocument().render_doc_link find in source code Render Markdown link to a local MD document, use relative path as a link. Examples md_doc = MDDocument ( path = '/root/parent/doc.md' ) MDDocument . render_doc_link ( 'my title' , anchor = 'my-anchor' , target_path = Path ( '/root/parent/doc.md' ) '[my title](#my-anchor)' MDDocument . render_doc_link ( 'my title' , target_path = Path ( '/root/parent/other.md' )) '[my title](other.md)' MDDocument . render_doc_link ( 'my title' , anchor = 'my-anchor' , target_path = Path ( 'doc.md' )) '[my title](doc.md#my-anchor)' MDDocument . render_doc_link ( 'my title' , anchor = 'my-anchor' ) '[my title](#my-anchor)' Arguments MDDocument().title - Link text. anchor - Unescaped or escaped anchor tag. target_path - Target MDDocument path. Returns A string with Markdown link. Signature def render_doc_link ( self , title : str , anchor : str = \"\" , target_path : Optional [ Path ] = None ) -> str : ... MDDocument.render_link find in source code Render Markdown link wih escaped title. Examples MDDocument . render_link ( 'my title' , 'doc.md#test' ) '[my title](doc.md#test)' MDDocument . render_link ( 'MyClass.__init__' , 'my.md' ) '[MyClass.__init__](doc.md#my.md)' Arguments MDDocument().title - Link text. link - Link target. Returns A string with Markdown link. Signature @classmethod def render_link ( cls , title : str , link : str ) -> str : ... MDDocument().sections find in source code All non-special sections of the document. Signature @property def sections ( self ) -> List [ str ]: ... MDDocument().subtitle find in source code MDDocument subtitle or an empty string. Signature @property def subtitle ( self ) -> str : ... MDDocument().subtitle find in source code Signature @subtitle . setter def subtitle ( self , subtitle : str ) -> None : ... MDDocument().title find in source code MDDocument title or an empty string. Signature @property def title ( self ) -> str : ... MDDocument().title find in source code Signature @title . setter def title ( self , title : str ) -> None : ... MDDocument().toc_section find in source code Document Tree of Contents section or an empty line. Signature @property def toc_section ( self ) -> str : ... MDDocument().toc_section find in source code Signature @toc_section . setter def toc_section ( self , toc_section : str ) -> None : ... MDDocument().write find in source code Write MD content to MDDocument().path . Signature def write ( self ) -> None : ...","title":"MDDocument"},{"location":"handsdown/md_document/#mddocument","text":"Handsdown API Index / Handsdown / MDDocument Auto-generated documentation for handsdown.md_document module.","title":"MDDocument"},{"location":"handsdown/md_document/#mddocument_1","text":"find in source code Markdown file builder. Can be used as a context manager, on exit context is written to path .","title":"MDDocument"},{"location":"handsdown/md_document/#examples","text":"md_doc = MDDocument ( path = Path ( 'output.md' )) md_doc . append ( '## New section' ) md_doc . append ( 'some content' ) md_doc . title = 'My doc' md_doc . write () # output is indented for readability Path ( 'output.md' ) . read_text () '''# My doc - [My doc](#my-doc) - [New section](#new-section) ## New section some content ''' with MDDocument ( path = Path ( 'output.md' )) as md_document : md_document . title = 'My doc' md_doc . append_title ( 'New section' , level = 2 ) md_doc . append ( 'New line' )","title":"Examples"},{"location":"handsdown/md_document/#arguments","text":"path - Path to store document.","title":"Arguments"},{"location":"handsdown/md_document/#signature","text":"class MDDocument : def __init__ ( self , path : Path , encoding : str = ENCODING ) -> None : ...","title":"Signature"},{"location":"handsdown/md_document/#see-also","text":"ENCODING","title":"See also"},{"location":"handsdown/md_document/#mddocumentappend","text":"find in source code Append content to the document. Handle trimming and sectioning the content and update MDDocument().title and MDDocument().toc_section fields.","title":"MDDocument().append"},{"location":"handsdown/md_document/#arguments_1","text":"content - Text to add.","title":"Arguments"},{"location":"handsdown/md_document/#signature_1","text":"def append ( self , content : str ) -> None : ...","title":"Signature"},{"location":"handsdown/md_document/#mddocumentget_anchor","text":"find in source code Convert title to a GitHub-friendly anchor link.","title":"MDDocument.get_anchor"},{"location":"handsdown/md_document/#returns","text":"A test of anchor link.","title":"Returns"},{"location":"handsdown/md_document/#signature_2","text":"@classmethod def get_anchor ( cls , title : str ) -> str : ...","title":"Signature"},{"location":"handsdown/md_document/#mddocumentget_doc_link","text":"find in source code Get Markdown link to a local MD document, use relative path as a link.","title":"MDDocument().get_doc_link"},{"location":"handsdown/md_document/#arguments_2","text":"MDDocument().path - Path to local MDDocument anchor - Unescaped or escaped anchor tag","title":"Arguments"},{"location":"handsdown/md_document/#returns_1","text":"A string with Markdown link.","title":"Returns"},{"location":"handsdown/md_document/#signature_3","text":"def get_doc_link ( self , path : Path , anchor : str = \"\" ) -> str : ...","title":"Signature"},{"location":"handsdown/md_document/#mddocumentis_toc","text":"find in source code Check if the section is Tree of Contents.","title":"MDDocument.is_toc"},{"location":"handsdown/md_document/#returns_2","text":"True the section is ToC.","title":"Returns"},{"location":"handsdown/md_document/#signature_4","text":"@staticmethod def is_toc ( section : str ) -> bool : ...","title":"Signature"},{"location":"handsdown/md_document/#mddocumentpath","text":"find in source code Output path of the document.","title":"MDDocument().path"},{"location":"handsdown/md_document/#signature_5","text":"@property def path ( self ) -> NicePath : ...","title":"Signature"},{"location":"handsdown/md_document/#see-also_1","text":"NicePath","title":"See also"},{"location":"handsdown/md_document/#mddocumentread","text":"find in source code Read and parse content from source_path .","title":"MDDocument().read"},{"location":"handsdown/md_document/#arguments_3","text":"source_path - Input file path. If not provided - MDDocument().path is used. encoding - File encoding.","title":"Arguments"},{"location":"handsdown/md_document/#signature_6","text":"def read ( self , source_path : Optional [ Path ] = None ) -> None : ...","title":"Signature"},{"location":"handsdown/md_document/#mddocumentrender_doc_link","text":"find in source code Render Markdown link to a local MD document, use relative path as a link.","title":"MDDocument().render_doc_link"},{"location":"handsdown/md_document/#examples_1","text":"md_doc = MDDocument ( path = '/root/parent/doc.md' ) MDDocument . render_doc_link ( 'my title' , anchor = 'my-anchor' , target_path = Path ( '/root/parent/doc.md' ) '[my title](#my-anchor)' MDDocument . render_doc_link ( 'my title' , target_path = Path ( '/root/parent/other.md' )) '[my title](other.md)' MDDocument . render_doc_link ( 'my title' , anchor = 'my-anchor' , target_path = Path ( 'doc.md' )) '[my title](doc.md#my-anchor)' MDDocument . render_doc_link ( 'my title' , anchor = 'my-anchor' ) '[my title](#my-anchor)'","title":"Examples"},{"location":"handsdown/md_document/#arguments_4","text":"MDDocument().title - Link text. anchor - Unescaped or escaped anchor tag. target_path - Target MDDocument path.","title":"Arguments"},{"location":"handsdown/md_document/#returns_3","text":"A string with Markdown link.","title":"Returns"},{"location":"handsdown/md_document/#signature_7","text":"def render_doc_link ( self , title : str , anchor : str = \"\" , target_path : Optional [ Path ] = None ) -> str : ...","title":"Signature"},{"location":"handsdown/md_document/#mddocumentrender_link","text":"find in source code Render Markdown link wih escaped title.","title":"MDDocument.render_link"},{"location":"handsdown/md_document/#examples_2","text":"MDDocument . render_link ( 'my title' , 'doc.md#test' ) '[my title](doc.md#test)' MDDocument . render_link ( 'MyClass.__init__' , 'my.md' ) '[MyClass.__init__](doc.md#my.md)'","title":"Examples"},{"location":"handsdown/md_document/#arguments_5","text":"MDDocument().title - Link text. link - Link target.","title":"Arguments"},{"location":"handsdown/md_document/#returns_4","text":"A string with Markdown link.","title":"Returns"},{"location":"handsdown/md_document/#signature_8","text":"@classmethod def render_link ( cls , title : str , link : str ) -> str : ...","title":"Signature"},{"location":"handsdown/md_document/#mddocumentsections","text":"find in source code All non-special sections of the document.","title":"MDDocument().sections"},{"location":"handsdown/md_document/#signature_9","text":"@property def sections ( self ) -> List [ str ]: ...","title":"Signature"},{"location":"handsdown/md_document/#mddocumentsubtitle","text":"find in source code MDDocument subtitle or an empty string.","title":"MDDocument().subtitle"},{"location":"handsdown/md_document/#signature_10","text":"@property def subtitle ( self ) -> str : ...","title":"Signature"},{"location":"handsdown/md_document/#mddocumentsubtitle_1","text":"find in source code","title":"MDDocument().subtitle"},{"location":"handsdown/md_document/#signature_11","text":"@subtitle . setter def subtitle ( self , subtitle : str ) -> None : ...","title":"Signature"},{"location":"handsdown/md_document/#mddocumenttitle","text":"find in source code MDDocument title or an empty string.","title":"MDDocument().title"},{"location":"handsdown/md_document/#signature_12","text":"@property def title ( self ) -> str : ...","title":"Signature"},{"location":"handsdown/md_document/#mddocumenttitle_1","text":"find in source code","title":"MDDocument().title"},{"location":"handsdown/md_document/#signature_13","text":"@title . setter def title ( self , title : str ) -> None : ...","title":"Signature"},{"location":"handsdown/md_document/#mddocumenttoc_section","text":"find in source code Document Tree of Contents section or an empty line.","title":"MDDocument().toc_section"},{"location":"handsdown/md_document/#signature_14","text":"@property def toc_section ( self ) -> str : ...","title":"Signature"},{"location":"handsdown/md_document/#mddocumenttoc_section_1","text":"find in source code","title":"MDDocument().toc_section"},{"location":"handsdown/md_document/#signature_15","text":"@toc_section . setter def toc_section ( self , toc_section : str ) -> None : ...","title":"Signature"},{"location":"handsdown/md_document/#mddocumentwrite","text":"find in source code Write MD content to MDDocument().path .","title":"MDDocument().write"},{"location":"handsdown/md_document/#signature_16","text":"def write ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/module/","text":"Module Handsdown API Index / Handsdown / Module Auto-generated documentation for handsdown. main module.","title":"Module"},{"location":"handsdown/module/#module","text":"Handsdown API Index / Handsdown / Module Auto-generated documentation for handsdown. main module.","title":"Module"},{"location":"handsdown/ast_parser/","text":"AST Parser Handsdown API Index / Handsdown / AST Parser Auto-generated documentation for handsdown.ast_parser module. Modules Analyzers ModuleRecordList Node Records Smart Ast Type Defs","title":"AST Parser"},{"location":"handsdown/ast_parser/#ast-parser","text":"Handsdown API Index / Handsdown / AST Parser Auto-generated documentation for handsdown.ast_parser module.","title":"AST Parser"},{"location":"handsdown/ast_parser/#modules","text":"Analyzers ModuleRecordList Node Records Smart Ast Type Defs","title":"Modules"},{"location":"handsdown/ast_parser/module_record_list/","text":"ModuleRecordList Handsdown API Index / Handsdown / AST Parser / ModuleRecordList Auto-generated documentation for handsdown.ast_parser.module_record_list module. ModuleRecordList find in source code Aggregation of ModuleRecord objects. Signature class ModuleRecordList : def __init__ ( self ) -> None : ... ModuleRecordList(). iter find in source code Iterate over all added ModuleRecord entries. Yields ModuleRecord entries. Signature def __iter__ ( self ) -> Iterator [ ModuleRecord ]: ... ModuleRecordList().add find in source code Add new ModuleRecord . Arguments module_record - A new ModuleRecord Signature def add ( self , module_record : ModuleRecord ) -> None : ... See also ModuleRecord ModuleRecordList().find_module_record find in source code Find ModuleRecord by it's import string. Arguments import_string - Object import string. Returns Found NodeRecord instance or None. Signature def find_module_record ( self , import_string : ImportString ) -> Optional [ ModuleRecord ]: ... See also ImportString ModuleRecordList().get_package_names find in source code Get top level import strings. Returns A set of top level imports as strings. Signature def get_package_names ( self ) -> Set [ str ]: ...","title":"ModuleRecordList"},{"location":"handsdown/ast_parser/module_record_list/#modulerecordlist","text":"Handsdown API Index / Handsdown / AST Parser / ModuleRecordList Auto-generated documentation for handsdown.ast_parser.module_record_list module.","title":"ModuleRecordList"},{"location":"handsdown/ast_parser/module_record_list/#modulerecordlist_1","text":"find in source code Aggregation of ModuleRecord objects.","title":"ModuleRecordList"},{"location":"handsdown/ast_parser/module_record_list/#signature","text":"class ModuleRecordList : def __init__ ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/module_record_list/#modulerecordlistiter","text":"find in source code Iterate over all added ModuleRecord entries.","title":"ModuleRecordList().iter"},{"location":"handsdown/ast_parser/module_record_list/#yields","text":"ModuleRecord entries.","title":"Yields"},{"location":"handsdown/ast_parser/module_record_list/#signature_1","text":"def __iter__ ( self ) -> Iterator [ ModuleRecord ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/module_record_list/#modulerecordlistadd","text":"find in source code Add new ModuleRecord .","title":"ModuleRecordList().add"},{"location":"handsdown/ast_parser/module_record_list/#arguments","text":"module_record - A new ModuleRecord","title":"Arguments"},{"location":"handsdown/ast_parser/module_record_list/#signature_2","text":"def add ( self , module_record : ModuleRecord ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/module_record_list/#see-also","text":"ModuleRecord","title":"See also"},{"location":"handsdown/ast_parser/module_record_list/#modulerecordlistfind_module_record","text":"find in source code Find ModuleRecord by it's import string.","title":"ModuleRecordList().find_module_record"},{"location":"handsdown/ast_parser/module_record_list/#arguments_1","text":"import_string - Object import string.","title":"Arguments"},{"location":"handsdown/ast_parser/module_record_list/#returns","text":"Found NodeRecord instance or None.","title":"Returns"},{"location":"handsdown/ast_parser/module_record_list/#signature_3","text":"def find_module_record ( self , import_string : ImportString ) -> Optional [ ModuleRecord ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/module_record_list/#see-also_1","text":"ImportString","title":"See also"},{"location":"handsdown/ast_parser/module_record_list/#modulerecordlistget_package_names","text":"find in source code Get top level import strings.","title":"ModuleRecordList().get_package_names"},{"location":"handsdown/ast_parser/module_record_list/#returns_1","text":"A set of top level imports as strings.","title":"Returns"},{"location":"handsdown/ast_parser/module_record_list/#signature_4","text":"def get_package_names ( self ) -> Set [ str ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/smart_ast/","text":"Smart Ast Handsdown API Index / Handsdown / AST Parser / Smart Ast Auto-generated documentation for handsdown.ast_parser.smart_ast module.","title":"Smart Ast"},{"location":"handsdown/ast_parser/smart_ast/#smart-ast","text":"Handsdown API Index / Handsdown / AST Parser / Smart Ast Auto-generated documentation for handsdown.ast_parser.smart_ast module.","title":"Smart Ast"},{"location":"handsdown/ast_parser/type_defs/","text":"Type Defs Handsdown API Index / Handsdown / AST Parser / Type Defs Auto-generated documentation for handsdown.ast_parser.type_defs module. Attributes RenderExpr - Ready for render expression: Union[NodeRecord, str] Node - AST node or text: Union[str, ast.AST] ASTIterable - Iterable AST types: Union[ast.List, ast.Set, ast.Tuple] ASTImport - AST import node: Union[ast.Import, ast.ImportFrom] ASTFunctionDef - AST import node: Union[ast.FunctionDef, ast.AsyncFunctionDef]","title":"Type Defs"},{"location":"handsdown/ast_parser/type_defs/#type-defs","text":"Handsdown API Index / Handsdown / AST Parser / Type Defs Auto-generated documentation for handsdown.ast_parser.type_defs module.","title":"Type Defs"},{"location":"handsdown/ast_parser/type_defs/#attributes","text":"RenderExpr - Ready for render expression: Union[NodeRecord, str] Node - AST node or text: Union[str, ast.AST] ASTIterable - Iterable AST types: Union[ast.List, ast.Set, ast.Tuple] ASTImport - AST import node: Union[ast.Import, ast.ImportFrom] ASTFunctionDef - AST import node: Union[ast.FunctionDef, ast.AsyncFunctionDef]","title":"Attributes"},{"location":"handsdown/ast_parser/analyzers/","text":"Analyzers Handsdown API Index / Handsdown / AST Parser / Analyzers Auto-generated documentation for handsdown.ast_parser.analyzers module. Modules BaseAnalyzer ClassAnalyzer ExpressionAnalyzer FunctionAnalyzer ModuleAnalyzer","title":"Analyzers"},{"location":"handsdown/ast_parser/analyzers/#analyzers","text":"Handsdown API Index / Handsdown / AST Parser / Analyzers Auto-generated documentation for handsdown.ast_parser.analyzers module.","title":"Analyzers"},{"location":"handsdown/ast_parser/analyzers/#modules","text":"BaseAnalyzer ClassAnalyzer ExpressionAnalyzer FunctionAnalyzer ModuleAnalyzer","title":"Modules"},{"location":"handsdown/ast_parser/analyzers/base_analyzer/","text":"BaseAnalyzer Handsdown API Index / Handsdown / AST Parser / Analyzers / BaseAnalyzer Auto-generated documentation for handsdown.ast_parser.analyzers.base_analyzer module. BaseAnalyzer find in source code Base AST analyzer. Has lists for all objects for different analyzers. Signature class BaseAnalyzer ( ast . NodeVisitor ): def __init__ ( self ) -> None : ...","title":"BaseAnalyzer"},{"location":"handsdown/ast_parser/analyzers/base_analyzer/#baseanalyzer","text":"Handsdown API Index / Handsdown / AST Parser / Analyzers / BaseAnalyzer Auto-generated documentation for handsdown.ast_parser.analyzers.base_analyzer module.","title":"BaseAnalyzer"},{"location":"handsdown/ast_parser/analyzers/base_analyzer/#baseanalyzer_1","text":"find in source code Base AST analyzer. Has lists for all objects for different analyzers.","title":"BaseAnalyzer"},{"location":"handsdown/ast_parser/analyzers/base_analyzer/#signature","text":"class BaseAnalyzer ( ast . NodeVisitor ): def __init__ ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/","text":"ClassAnalyzer Handsdown API Index / Handsdown / AST Parser / Analyzers / ClassAnalyzer Auto-generated documentation for handsdown.ast_parser.analyzers.class_analyzer module. ClassAnalyzer find in source code AST analyzer for ast.ClassDef records. Signature class ClassAnalyzer ( BaseAnalyzer ): def __init__ ( self ) -> None : ... See also BaseAnalyzer ClassAnalyzer().generic_visit find in source code Do nothing for unknown ast.AST nodes. Arguments node - AST node. Signature def generic_visit ( self , node : ast . AST ) -> None : ... ClassAnalyzer().visit_Assign find in source code Parse info about class attribute statements. Adds new ast.Assign entry to attribute_nodes . Skips assignments to anything pther that a new variable. Skips multiple assignments. Skips assignments with names starting with _ . Examples class MyClass : MY_MODULE_ATTR = \"value\" my_attr = \"value\" # these entries are skipped _MY_MODULE_ATTR = \"value\" multi_attr_1 , multi_attr_2 = [ 1 , 2 ] my_object . name = \"value\" Arguments node - AST node. Signature def visit_Assign ( self , node : ast . Assign ) -> None : ... ClassAnalyzer().visit_AsyncFunctionDef find in source code Parse info about class asynchronous method statements. Adds new FunctionRecord entry to method_records . Examples class MyClass : async def my_method ( self , arg ): return await arg Arguments node - AST node. Signature def visit_AsyncFunctionDef ( self , node : ast . AsyncFunctionDef ) -> None : ... ClassAnalyzer().visit_ClassDef find in source code Entrypoint for the analyzer. Adds new ast.expr entry to decorator_nodes for each node from node.decorator_list . Adds new ast.expr entry to base_nodes for each node from node.bases . Visits each node from node.body list to parse methods. Examples def my_func (): pass Arguments node - AST node. Signature def visit_ClassDef ( self , node : ast . ClassDef ) -> None : ... ClassAnalyzer().visit_FunctionDef find in source code Parse info about class method statements. Adds new FunctionRecord entry to method_records . Examples class MyClass : def my_method ( self , arg ): return arg Arguments node - AST node. Signature def visit_FunctionDef ( self , node : ast . FunctionDef ) -> None : ...","title":"ClassAnalyzer"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#classanalyzer","text":"Handsdown API Index / Handsdown / AST Parser / Analyzers / ClassAnalyzer Auto-generated documentation for handsdown.ast_parser.analyzers.class_analyzer module.","title":"ClassAnalyzer"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#classanalyzer_1","text":"find in source code AST analyzer for ast.ClassDef records.","title":"ClassAnalyzer"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#signature","text":"class ClassAnalyzer ( BaseAnalyzer ): def __init__ ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#see-also","text":"BaseAnalyzer","title":"See also"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#classanalyzergeneric_visit","text":"find in source code Do nothing for unknown ast.AST nodes.","title":"ClassAnalyzer().generic_visit"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#arguments","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#signature_1","text":"def generic_visit ( self , node : ast . AST ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#classanalyzervisit_assign","text":"find in source code Parse info about class attribute statements. Adds new ast.Assign entry to attribute_nodes . Skips assignments to anything pther that a new variable. Skips multiple assignments. Skips assignments with names starting with _ .","title":"ClassAnalyzer().visit_Assign"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#examples","text":"class MyClass : MY_MODULE_ATTR = \"value\" my_attr = \"value\" # these entries are skipped _MY_MODULE_ATTR = \"value\" multi_attr_1 , multi_attr_2 = [ 1 , 2 ] my_object . name = \"value\"","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#arguments_1","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#signature_2","text":"def visit_Assign ( self , node : ast . Assign ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#classanalyzervisit_asyncfunctiondef","text":"find in source code Parse info about class asynchronous method statements. Adds new FunctionRecord entry to method_records .","title":"ClassAnalyzer().visit_AsyncFunctionDef"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#examples_1","text":"class MyClass : async def my_method ( self , arg ): return await arg","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#arguments_2","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#signature_3","text":"def visit_AsyncFunctionDef ( self , node : ast . AsyncFunctionDef ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#classanalyzervisit_classdef","text":"find in source code Entrypoint for the analyzer. Adds new ast.expr entry to decorator_nodes for each node from node.decorator_list . Adds new ast.expr entry to base_nodes for each node from node.bases . Visits each node from node.body list to parse methods.","title":"ClassAnalyzer().visit_ClassDef"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#examples_2","text":"def my_func (): pass","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#arguments_3","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#signature_4","text":"def visit_ClassDef ( self , node : ast . ClassDef ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#classanalyzervisit_functiondef","text":"find in source code Parse info about class method statements. Adds new FunctionRecord entry to method_records .","title":"ClassAnalyzer().visit_FunctionDef"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#examples_3","text":"class MyClass : def my_method ( self , arg ): return arg","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#arguments_4","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/class_analyzer/#signature_5","text":"def visit_FunctionDef ( self , node : ast . FunctionDef ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/","text":"ExpressionAnalyzer Handsdown API Index / Handsdown / AST Parser / Analyzers / ExpressionAnalyzer Auto-generated documentation for handsdown.ast_parser.analyzers.expression_analyzer module. ExpressionAnalyzer find in source code Attributes UNKNOWN - dummy value to replace unknown nodes and operators: '...' AST analyzer for ast.expr records. Prepares parts for NodeRecord.render method. Signature class ExpressionAnalyzer ( BaseAnalyzer ): def __init__ ( self ) -> None : ... See also BaseAnalyzer ExpressionAnalyzer().generic_visit find in source code Parse info from an unknown ast.AST node and put ... to parts . Logs warning with node class. Arguments node - AST node. Signature def generic_visit ( self , node : ast . AST ) -> None : ... ExpressionAnalyzer().visit_Attribute find in source code Parse info from ast.Attribute node and put it to parts . Examples my_object . attribute Arguments node - AST node. Signature def visit_Attribute ( self , node : ast . Attribute ) -> None : ... ExpressionAnalyzer().visit_Await find in source code Parse info from ast.Await node and put it to parts . Examples await result Arguments node - AST node. Signature def visit_Await ( self , node : ast . Await ) -> None : ... ExpressionAnalyzer().visit_BinOp find in source code Parse info from ast.BinOp node and put it to parts . Examples 1 + 5 value + 1 Arguments node - AST node. Signature def visit_BinOp ( self , node : ast . BinOp ) -> None : ... ExpressionAnalyzer().visit_BoolOp find in source code Parse info from ast.BoolOp node and put it to parts . Examples value or True a and b Arguments node - AST node. Signature def visit_BoolOp ( self , node : ast . BoolOp ) -> None : ... ExpressionAnalyzer().visit_Bytes find in source code Parse info from ast.Bytes node and put it to parts . Examples b \"my_string\" Arguments node - AST node. Signature def visit_Bytes ( self , node : ast . Bytes ) -> None : ... ExpressionAnalyzer().visit_Call find in source code Parse info from ast.Call node and put it to parts . Arguments node - AST node. Signature def visit_Call ( self , node : ast . Call ) -> None : ... ExpressionAnalyzer().visit_Compare find in source code Parse info from ast.Compare node and put it to parts . Examples value < 5 1 < weekday < 7 Arguments node - AST node. Signature def visit_Compare ( self , node : ast . Compare ) -> None : ... ExpressionAnalyzer().visit_Dict find in source code Parse info from ast.Dict node and put it to parts . Arguments node - AST node. Signature def visit_Dict ( self , node : ast . Dict ) -> None : ... ExpressionAnalyzer().visit_DictComp find in source code Parse info from ast.DictComp node and put it to parts . Examples { k : 1 for k in range ( 3 )} Arguments node - AST node. Signature def visit_DictComp ( self , node : ast . DictComp ) -> None : ... ExpressionAnalyzer().visit_Ellipsis find in source code Parse info from ast.Ellipsis node and put it to parts . Examples ... Arguments node - AST node. Signature def visit_Ellipsis ( self , _node : ast . ASTEllipsis ) -> None : ... ExpressionAnalyzer().visit_FormattedValue find in source code Parse info from ast.FormattedValue node and put it to parts . Examples f \" { formatted_value } \" Arguments node - AST node. Signature def visit_FormattedValue ( self , node : ast . FormattedValue ) -> None : ... ExpressionAnalyzer().visit_GeneratorExp find in source code Parse info from ast.GeneratorExp node and put it to parts . Examples ( k + 1 for k in range ( 3 )) Arguments node - AST node. Signature def visit_GeneratorExp ( self , node : ast . GeneratorExp ) -> None : ... ExpressionAnalyzer().visit_IfExp find in source code Parse info from ast.IfExp node and put it to parts . Examples 5 if my_value else 6 Arguments node - AST node. Signature def visit_IfExp ( self , node : ast . IfExp ) -> None : ... ExpressionAnalyzer().visit_Index find in source code Parse info from ast.Index node and put it to parts . Examples Union [ str , bool ] Union [ str ] Arguments node - AST node. Signature def visit_Index ( self , node : ast . Index ) -> None : ... ExpressionAnalyzer().visit_JoinedStr find in source code Parse info from ast.JoinedStr node and put it to parts . Examples f 'str: { my_string } ' Arguments node - AST node. Signature def visit_JoinedStr ( self , node : ast . JoinedStr ) -> None : ... ExpressionAnalyzer().visit_Lambda find in source code Parse info from ast.Lambda node and put it to parts . Examples lambda x : x + 5 Arguments node - AST node. Signature def visit_Lambda ( self , node : ast . Lambda ) -> None : ... ExpressionAnalyzer().visit_List find in source code Parse info from ast.List node and put it to parts . Examples [ 1 , 2 , 3 ] Arguments node - AST node. Signature def visit_List ( self , node : ast . List ) -> None : ... ExpressionAnalyzer().visit_ListComp find in source code Parse info from ast.ListComp node and put it to parts . Examples [ k + 1 for k in range ( 3 )] Arguments node - AST node. Signature def visit_ListComp ( self , node : ast . ListComp ) -> None : ... ExpressionAnalyzer().visit_Name find in source code Parse info from ast.Name node and put it to parts . Examples my_value Arguments node - AST node. Signature def visit_Name ( self , node : ast . Name ) -> None : ... ExpressionAnalyzer().visit_NameConstant find in source code Parse info from ast.NameConstant node and put it to parts . Examples None True Arguments node - AST node. Signature def visit_NameConstant ( self , node : ast . NameConstant ) -> None : ... ExpressionAnalyzer().visit_Num find in source code Parse info from ast.Num node and put it to parts . Examples 123 123.456 Arguments node - AST node. Signature def visit_Num ( self , node : ast . Num ) -> None : ... ExpressionAnalyzer().visit_Set find in source code Parse info from ast.Set node and put it to parts . Examples { 1 , 2 , 3 } Arguments node - AST node. Signature def visit_Set ( self , node : ast . Set ) -> None : ... ExpressionAnalyzer().visit_SetComp find in source code Parse info from ast.SetComp node and put it to parts . Examples { k + 1 for k in range ( 3 )} Arguments node - AST node. Signature def visit_SetComp ( self , node : ast . SetComp ) -> None : ... ExpressionAnalyzer().visit_Slice find in source code Parse info from ast.Slice node and put it to parts . Examples [ 1 :] [: 2 ] [ 1 : 2 ] [ 1 : 2 : - 1 ] [:: - 1 ] Arguments node - AST node. Signature def visit_Slice ( self , node : ast . Slice ) -> None : ... ExpressionAnalyzer().visit_Starred find in source code Parse info from ast.Starred node and put it to parts . Examples * arg Arguments node - AST node. Signature def visit_Starred ( self , node : ast . Starred ) -> None : ... ExpressionAnalyzer().visit_Str find in source code Parse info from ast.Str node and put it to parts . Examples \"my_string\" Arguments node - AST node. Signature def visit_Str ( self , node : ast . Str ) -> None : ... ExpressionAnalyzer().visit_Subscript find in source code Parse info from ast.Subscript node and put it to parts . Type annotations are also matched by this method. Examples Union [ Name , bool ] List [ 1 : 4 ] Arguments node - AST node. Signature def visit_Subscript ( self , node : ast . Subscript ) -> None : ... ExpressionAnalyzer().visit_Tuple find in source code Parse info from ast.Tuple node and put it to parts . Examples ( 1 , 2 , 3 ) Arguments node - AST node. Signature def visit_Tuple ( self , node : ast . Tuple ) -> None : ... ExpressionAnalyzer().visit_UnaryOp find in source code Parse info from ast.UnaryOp node and put it to parts . Examples + 5 - 12 ~ 1 not True Arguments node - AST node. Signature def visit_UnaryOp ( self , node : ast . UnaryOp ) -> None : ... ExpressionAnalyzer().visit_Yield find in source code Parse info from ast.Yield node and put it to parts . Examples yield yield value Arguments node - AST node. Signature def visit_Yield ( self , node : ast . Yield ) -> None : ... ExpressionAnalyzer().visit_YieldFrom find in source code Parse info from ast.YieldFrom node and put it to parts . Examples yield from my_generator Arguments node - AST node. Signature def visit_YieldFrom ( self , node : ast . YieldFrom ) -> None : ... ExpressionAnalyzer().visit_arg find in source code Parse info from ast.arg node and put it to parts . Examples def my_func ( arg ) def my_func ( arg : str ) Arguments node - AST node. Signature def visit_arg ( self , node : ast . arg ) -> None : ... ExpressionAnalyzer().visit_arguments find in source code Parse info from ast.arguments node and put it to parts . Examples def my_func ( arg , * args , ** kwargs ) Arguments node - AST node. Signature def visit_arguments ( self , node : ast . arguments ) -> None : ... ExpressionAnalyzer().visit_comprehension find in source code Parse info from ast.comprehension node and put it to parts . Examples for k in range ( 3 ) if k > 0 if True Arguments node - AST node. Signature def visit_comprehension ( self , node : ast . comprehension ) -> None : ... ExpressionAnalyzer().visit_keyword find in source code Parse info from ast.keyword node and put it to parts . Examples my_func ( ** { \"kwarg\" : \"value\" }) my_func ( kwarg = \"value\" ) Arguments node - AST node. Signature def visit_keyword ( self , node : ast . keyword ) -> None : ...","title":"ExpressionAnalyzer"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzer","text":"Handsdown API Index / Handsdown / AST Parser / Analyzers / ExpressionAnalyzer Auto-generated documentation for handsdown.ast_parser.analyzers.expression_analyzer module.","title":"ExpressionAnalyzer"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzer_1","text":"find in source code","title":"ExpressionAnalyzer"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#attributes","text":"UNKNOWN - dummy value to replace unknown nodes and operators: '...' AST analyzer for ast.expr records. Prepares parts for NodeRecord.render method.","title":"Attributes"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature","text":"class ExpressionAnalyzer ( BaseAnalyzer ): def __init__ ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#see-also","text":"BaseAnalyzer","title":"See also"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzergeneric_visit","text":"find in source code Parse info from an unknown ast.AST node and put ... to parts . Logs warning with node class.","title":"ExpressionAnalyzer().generic_visit"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_1","text":"def generic_visit ( self , node : ast . AST ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_attribute","text":"find in source code Parse info from ast.Attribute node and put it to parts .","title":"ExpressionAnalyzer().visit_Attribute"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples","text":"my_object . attribute","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_1","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_2","text":"def visit_Attribute ( self , node : ast . Attribute ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_await","text":"find in source code Parse info from ast.Await node and put it to parts .","title":"ExpressionAnalyzer().visit_Await"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_1","text":"await result","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_2","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_3","text":"def visit_Await ( self , node : ast . Await ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_binop","text":"find in source code Parse info from ast.BinOp node and put it to parts .","title":"ExpressionAnalyzer().visit_BinOp"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_2","text":"1 + 5 value + 1","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_3","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_4","text":"def visit_BinOp ( self , node : ast . BinOp ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_boolop","text":"find in source code Parse info from ast.BoolOp node and put it to parts .","title":"ExpressionAnalyzer().visit_BoolOp"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_3","text":"value or True a and b","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_4","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_5","text":"def visit_BoolOp ( self , node : ast . BoolOp ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_bytes","text":"find in source code Parse info from ast.Bytes node and put it to parts .","title":"ExpressionAnalyzer().visit_Bytes"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_4","text":"b \"my_string\"","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_5","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_6","text":"def visit_Bytes ( self , node : ast . Bytes ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_call","text":"find in source code Parse info from ast.Call node and put it to parts .","title":"ExpressionAnalyzer().visit_Call"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_6","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_7","text":"def visit_Call ( self , node : ast . Call ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_compare","text":"find in source code Parse info from ast.Compare node and put it to parts .","title":"ExpressionAnalyzer().visit_Compare"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_5","text":"value < 5 1 < weekday < 7","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_7","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_8","text":"def visit_Compare ( self , node : ast . Compare ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_dict","text":"find in source code Parse info from ast.Dict node and put it to parts .","title":"ExpressionAnalyzer().visit_Dict"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_8","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_9","text":"def visit_Dict ( self , node : ast . Dict ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_dictcomp","text":"find in source code Parse info from ast.DictComp node and put it to parts .","title":"ExpressionAnalyzer().visit_DictComp"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_6","text":"{ k : 1 for k in range ( 3 )}","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_9","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_10","text":"def visit_DictComp ( self , node : ast . DictComp ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_ellipsis","text":"find in source code Parse info from ast.Ellipsis node and put it to parts .","title":"ExpressionAnalyzer().visit_Ellipsis"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_7","text":"...","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_10","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_11","text":"def visit_Ellipsis ( self , _node : ast . ASTEllipsis ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_formattedvalue","text":"find in source code Parse info from ast.FormattedValue node and put it to parts .","title":"ExpressionAnalyzer().visit_FormattedValue"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_8","text":"f \" { formatted_value } \"","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_11","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_12","text":"def visit_FormattedValue ( self , node : ast . FormattedValue ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_generatorexp","text":"find in source code Parse info from ast.GeneratorExp node and put it to parts .","title":"ExpressionAnalyzer().visit_GeneratorExp"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_9","text":"( k + 1 for k in range ( 3 ))","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_12","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_13","text":"def visit_GeneratorExp ( self , node : ast . GeneratorExp ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_ifexp","text":"find in source code Parse info from ast.IfExp node and put it to parts .","title":"ExpressionAnalyzer().visit_IfExp"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_10","text":"5 if my_value else 6","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_13","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_14","text":"def visit_IfExp ( self , node : ast . IfExp ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_index","text":"find in source code Parse info from ast.Index node and put it to parts .","title":"ExpressionAnalyzer().visit_Index"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_11","text":"Union [ str , bool ] Union [ str ]","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_14","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_15","text":"def visit_Index ( self , node : ast . Index ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_joinedstr","text":"find in source code Parse info from ast.JoinedStr node and put it to parts .","title":"ExpressionAnalyzer().visit_JoinedStr"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_12","text":"f 'str: { my_string } '","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_15","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_16","text":"def visit_JoinedStr ( self , node : ast . JoinedStr ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_lambda","text":"find in source code Parse info from ast.Lambda node and put it to parts .","title":"ExpressionAnalyzer().visit_Lambda"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_13","text":"lambda x : x + 5","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_16","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_17","text":"def visit_Lambda ( self , node : ast . Lambda ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_list","text":"find in source code Parse info from ast.List node and put it to parts .","title":"ExpressionAnalyzer().visit_List"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_14","text":"[ 1 , 2 , 3 ]","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_17","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_18","text":"def visit_List ( self , node : ast . List ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_listcomp","text":"find in source code Parse info from ast.ListComp node and put it to parts .","title":"ExpressionAnalyzer().visit_ListComp"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_15","text":"[ k + 1 for k in range ( 3 )]","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_18","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_19","text":"def visit_ListComp ( self , node : ast . ListComp ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_name","text":"find in source code Parse info from ast.Name node and put it to parts .","title":"ExpressionAnalyzer().visit_Name"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_16","text":"my_value","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_19","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_20","text":"def visit_Name ( self , node : ast . Name ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_nameconstant","text":"find in source code Parse info from ast.NameConstant node and put it to parts .","title":"ExpressionAnalyzer().visit_NameConstant"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_17","text":"None True","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_20","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_21","text":"def visit_NameConstant ( self , node : ast . NameConstant ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_num","text":"find in source code Parse info from ast.Num node and put it to parts .","title":"ExpressionAnalyzer().visit_Num"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_18","text":"123 123.456","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_21","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_22","text":"def visit_Num ( self , node : ast . Num ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_set","text":"find in source code Parse info from ast.Set node and put it to parts .","title":"ExpressionAnalyzer().visit_Set"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_19","text":"{ 1 , 2 , 3 }","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_22","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_23","text":"def visit_Set ( self , node : ast . Set ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_setcomp","text":"find in source code Parse info from ast.SetComp node and put it to parts .","title":"ExpressionAnalyzer().visit_SetComp"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_20","text":"{ k + 1 for k in range ( 3 )}","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_23","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_24","text":"def visit_SetComp ( self , node : ast . SetComp ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_slice","text":"find in source code Parse info from ast.Slice node and put it to parts .","title":"ExpressionAnalyzer().visit_Slice"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_21","text":"[ 1 :] [: 2 ] [ 1 : 2 ] [ 1 : 2 : - 1 ] [:: - 1 ]","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_24","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_25","text":"def visit_Slice ( self , node : ast . Slice ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_starred","text":"find in source code Parse info from ast.Starred node and put it to parts .","title":"ExpressionAnalyzer().visit_Starred"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_22","text":"* arg","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_25","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_26","text":"def visit_Starred ( self , node : ast . Starred ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_str","text":"find in source code Parse info from ast.Str node and put it to parts .","title":"ExpressionAnalyzer().visit_Str"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_23","text":"\"my_string\"","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_26","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_27","text":"def visit_Str ( self , node : ast . Str ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_subscript","text":"find in source code Parse info from ast.Subscript node and put it to parts . Type annotations are also matched by this method.","title":"ExpressionAnalyzer().visit_Subscript"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_24","text":"Union [ Name , bool ] List [ 1 : 4 ]","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_27","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_28","text":"def visit_Subscript ( self , node : ast . Subscript ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_tuple","text":"find in source code Parse info from ast.Tuple node and put it to parts .","title":"ExpressionAnalyzer().visit_Tuple"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_25","text":"( 1 , 2 , 3 )","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_28","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_29","text":"def visit_Tuple ( self , node : ast . Tuple ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_unaryop","text":"find in source code Parse info from ast.UnaryOp node and put it to parts .","title":"ExpressionAnalyzer().visit_UnaryOp"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_26","text":"+ 5 - 12 ~ 1 not True","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_29","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_30","text":"def visit_UnaryOp ( self , node : ast . UnaryOp ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_yield","text":"find in source code Parse info from ast.Yield node and put it to parts .","title":"ExpressionAnalyzer().visit_Yield"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_27","text":"yield yield value","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_30","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_31","text":"def visit_Yield ( self , node : ast . Yield ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_yieldfrom","text":"find in source code Parse info from ast.YieldFrom node and put it to parts .","title":"ExpressionAnalyzer().visit_YieldFrom"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_28","text":"yield from my_generator","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_31","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_32","text":"def visit_YieldFrom ( self , node : ast . YieldFrom ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_arg","text":"find in source code Parse info from ast.arg node and put it to parts .","title":"ExpressionAnalyzer().visit_arg"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_29","text":"def my_func ( arg ) def my_func ( arg : str )","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_32","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_33","text":"def visit_arg ( self , node : ast . arg ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_arguments","text":"find in source code Parse info from ast.arguments node and put it to parts .","title":"ExpressionAnalyzer().visit_arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_30","text":"def my_func ( arg , * args , ** kwargs )","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_33","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_34","text":"def visit_arguments ( self , node : ast . arguments ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_comprehension","text":"find in source code Parse info from ast.comprehension node and put it to parts .","title":"ExpressionAnalyzer().visit_comprehension"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_31","text":"for k in range ( 3 ) if k > 0 if True","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_34","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_35","text":"def visit_comprehension ( self , node : ast . comprehension ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#expressionanalyzervisit_keyword","text":"find in source code Parse info from ast.keyword node and put it to parts .","title":"ExpressionAnalyzer().visit_keyword"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#examples_32","text":"my_func ( ** { \"kwarg\" : \"value\" }) my_func ( kwarg = \"value\" )","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#arguments_35","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/expression_analyzer/#signature_36","text":"def visit_keyword ( self , node : ast . keyword ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/","text":"FunctionAnalyzer Handsdown API Index / Handsdown / AST Parser / Analyzers / FunctionAnalyzer Auto-generated documentation for handsdown.ast_parser.analyzers.function_analyzer module. FunctionAnalyzer find in source code AST analyzer for ast.FunctionDef records. Signature class FunctionAnalyzer ( BaseAnalyzer ): def __init__ ( self ) -> None : ... See also BaseAnalyzer FunctionAnalyzer().generic_visit find in source code Do nothing for unknown ast.AST nodes. Arguments node - AST node. Signature def generic_visit ( self , node : ast . AST ) -> None : ... FunctionAnalyzer().visit_AsyncFunctionDef find in source code Entrypoint for the analyzer for asynchronous functions. Visits each node from node.args . Adds new ast.expr entry to decorator_nodes for each node from node.decorator_list . Sets return_type_hint to node.returns if it defined. Examples async def my_func (): return await result Arguments node - AST node. Signature def visit_AsyncFunctionDef ( self , node : ast . AsyncFunctionDef ) -> None : ... FunctionAnalyzer().visit_FunctionDef find in source code Entrypoint for the analyzer. Visits each node from node.args . Adds new ast.expr entry to decorator_nodes for each node from node.decorator_list . Sets return_type_hint to node.returns if it defined. Examples def my_func (): return result Arguments node - AST node. Signature def visit_FunctionDef ( self , node : ast . FunctionDef ) -> None : ... FunctionAnalyzer().visit_arguments find in source code Parse info about class method statements. Adds new ArgumentRecord entry to argument_records for each argument. Examples # simple arguments def my_func ( arg1 , arg_default = \"value\" , * args , ** kwargs , ): pass # type annotated arguments def my_func_typed ( arg1 : str , arg_default : str = \"value\" , ): pass # keyword-only arguments def my_func_kw_only ( * , kw_only_arg ): pass # pos-only arguments for py38 def my_func_kw_only ( pos_only_arg , / ): pass Arguments node - AST node. Signature def visit_arguments ( self , node : ast . arguments ) -> None : ...","title":"FunctionAnalyzer"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#functionanalyzer","text":"Handsdown API Index / Handsdown / AST Parser / Analyzers / FunctionAnalyzer Auto-generated documentation for handsdown.ast_parser.analyzers.function_analyzer module.","title":"FunctionAnalyzer"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#functionanalyzer_1","text":"find in source code AST analyzer for ast.FunctionDef records.","title":"FunctionAnalyzer"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#signature","text":"class FunctionAnalyzer ( BaseAnalyzer ): def __init__ ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#see-also","text":"BaseAnalyzer","title":"See also"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#functionanalyzergeneric_visit","text":"find in source code Do nothing for unknown ast.AST nodes.","title":"FunctionAnalyzer().generic_visit"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#arguments","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#signature_1","text":"def generic_visit ( self , node : ast . AST ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#functionanalyzervisit_asyncfunctiondef","text":"find in source code Entrypoint for the analyzer for asynchronous functions. Visits each node from node.args . Adds new ast.expr entry to decorator_nodes for each node from node.decorator_list . Sets return_type_hint to node.returns if it defined.","title":"FunctionAnalyzer().visit_AsyncFunctionDef"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#examples","text":"async def my_func (): return await result","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#arguments_1","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#signature_2","text":"def visit_AsyncFunctionDef ( self , node : ast . AsyncFunctionDef ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#functionanalyzervisit_functiondef","text":"find in source code Entrypoint for the analyzer. Visits each node from node.args . Adds new ast.expr entry to decorator_nodes for each node from node.decorator_list . Sets return_type_hint to node.returns if it defined.","title":"FunctionAnalyzer().visit_FunctionDef"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#examples_1","text":"def my_func (): return result","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#arguments_2","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#signature_3","text":"def visit_FunctionDef ( self , node : ast . FunctionDef ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#functionanalyzervisit_arguments","text":"find in source code Parse info about class method statements. Adds new ArgumentRecord entry to argument_records for each argument.","title":"FunctionAnalyzer().visit_arguments"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#examples_2","text":"# simple arguments def my_func ( arg1 , arg_default = \"value\" , * args , ** kwargs , ): pass # type annotated arguments def my_func_typed ( arg1 : str , arg_default : str = \"value\" , ): pass # keyword-only arguments def my_func_kw_only ( * , kw_only_arg ): pass # pos-only arguments for py38 def my_func_kw_only ( pos_only_arg , / ): pass","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#arguments_3","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/function_analyzer/#signature_4","text":"def visit_arguments ( self , node : ast . arguments ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/","text":"ModuleAnalyzer Handsdown API Index / Handsdown / AST Parser / Analyzers / ModuleAnalyzer Auto-generated documentation for handsdown.ast_parser.analyzers.module_analyzer module. ModuleAnalyzer find in source code AST analyzer for ast.Module records. Signature class ModuleAnalyzer ( BaseAnalyzer ): def __init__ ( self ) -> None : ... See also BaseAnalyzer ModuleAnalyzer().visit_Assign find in source code Parse info about module attribute statements. Adds new ast.Assign entry to attribute_nodes . Skips assignments to anything pther that a new variable. Skips multiple assignments. Skips assignments with names starting with _ . Parses __all__ and add all values to all_names Examples MY_MODULE_ATTR = 'value' my_attr = \"value\" __all__ = [ 'MyClass' , 'my_func' ] # these entries are skipped _MY_MODULE_ATTR = \"value\" multi_attr_1 , multi_attr_2 = [ 1 , 2 ] my_object . name = \"value\" __all__ = all_list Arguments node - AST node. Signature def visit_Assign ( self , node : ast . Assign ) -> None : ... ModuleAnalyzer().visit_AsyncFunctionDef find in source code Parse info about module def ... statements. Adds node entry to function_nodes . Skips nodes with names starting with _ . Examples async def my_func ( arg1 ): return await arg1 Arguments node - AST node. Signature def visit_AsyncFunctionDef ( self , node : ast . AsyncFunctionDef ) -> None : ... ModuleAnalyzer().visit_ClassDef find in source code Parse info about module class ... statements. Adds node entry to class_nodes . Skips nodes with names starting with _ . Examples class MyClass (): pass Arguments node - AST node. Signature def visit_ClassDef ( self , node : ast . ClassDef ) -> None : ... ModuleAnalyzer().visit_FunctionDef find in source code Parse info about module def ... statements. Adds node entry to function_nodes . Skips nodes with names starting with _ . Examples def my_func ( arg1 ): return arg1 Arguments node - AST node. Signature def visit_FunctionDef ( self , node : ast . FunctionDef ) -> None : ... ModuleAnalyzer().visit_Import find in source code Parse info about module import ... statements. Adds node to import_nodes . Examples import my_module import my_module as my import my_module.my_class import my_module.my_class as my_class Arguments node - AST node. Signature def visit_Import ( self , node : ast . Import ) -> None : ... ModuleAnalyzer().visit_ImportFrom find in source code Parse info about module import ... from ... statements. Adds node to import_nodes . Examples from my_module import my_class from my_module import my_class as new_class Arguments node - AST node. Signature def visit_ImportFrom ( self , node : ast . ImportFrom ) -> None : ...","title":"ModuleAnalyzer"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzer","text":"Handsdown API Index / Handsdown / AST Parser / Analyzers / ModuleAnalyzer Auto-generated documentation for handsdown.ast_parser.analyzers.module_analyzer module.","title":"ModuleAnalyzer"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzer_1","text":"find in source code AST analyzer for ast.Module records.","title":"ModuleAnalyzer"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature","text":"class ModuleAnalyzer ( BaseAnalyzer ): def __init__ ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#see-also","text":"BaseAnalyzer","title":"See also"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzervisit_assign","text":"find in source code Parse info about module attribute statements. Adds new ast.Assign entry to attribute_nodes . Skips assignments to anything pther that a new variable. Skips multiple assignments. Skips assignments with names starting with _ . Parses __all__ and add all values to all_names","title":"ModuleAnalyzer().visit_Assign"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#examples","text":"MY_MODULE_ATTR = 'value' my_attr = \"value\" __all__ = [ 'MyClass' , 'my_func' ] # these entries are skipped _MY_MODULE_ATTR = \"value\" multi_attr_1 , multi_attr_2 = [ 1 , 2 ] my_object . name = \"value\" __all__ = all_list","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#arguments","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature_1","text":"def visit_Assign ( self , node : ast . Assign ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzervisit_asyncfunctiondef","text":"find in source code Parse info about module def ... statements. Adds node entry to function_nodes . Skips nodes with names starting with _ .","title":"ModuleAnalyzer().visit_AsyncFunctionDef"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#examples_1","text":"async def my_func ( arg1 ): return await arg1","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#arguments_1","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature_2","text":"def visit_AsyncFunctionDef ( self , node : ast . AsyncFunctionDef ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzervisit_classdef","text":"find in source code Parse info about module class ... statements. Adds node entry to class_nodes . Skips nodes with names starting with _ .","title":"ModuleAnalyzer().visit_ClassDef"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#examples_2","text":"class MyClass (): pass","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#arguments_2","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature_3","text":"def visit_ClassDef ( self , node : ast . ClassDef ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzervisit_functiondef","text":"find in source code Parse info about module def ... statements. Adds node entry to function_nodes . Skips nodes with names starting with _ .","title":"ModuleAnalyzer().visit_FunctionDef"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#examples_3","text":"def my_func ( arg1 ): return arg1","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#arguments_3","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature_4","text":"def visit_FunctionDef ( self , node : ast . FunctionDef ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzervisit_import","text":"find in source code Parse info about module import ... statements. Adds node to import_nodes .","title":"ModuleAnalyzer().visit_Import"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#examples_4","text":"import my_module import my_module as my import my_module.my_class import my_module.my_class as my_class","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#arguments_4","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature_5","text":"def visit_Import ( self , node : ast . Import ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#moduleanalyzervisit_importfrom","text":"find in source code Parse info about module import ... from ... statements. Adds node to import_nodes .","title":"ModuleAnalyzer().visit_ImportFrom"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#examples_5","text":"from my_module import my_class from my_module import my_class as new_class","title":"Examples"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#arguments_5","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/analyzers/module_analyzer/#signature_6","text":"def visit_ImportFrom ( self , node : ast . ImportFrom ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/","text":"Node Records Handsdown API Index / Handsdown / AST Parser / Node Records Auto-generated documentation for handsdown.ast_parser.node_records module. Modules ArgumentRecord AttributeRecord ClassRecord ExpressionRecord FunctionRecord ImportRecord ModuleRecord NodeRecord TextRecord","title":"Node Records"},{"location":"handsdown/ast_parser/node_records/#node-records","text":"Handsdown API Index / Handsdown / AST Parser / Node Records Auto-generated documentation for handsdown.ast_parser.node_records module.","title":"Node Records"},{"location":"handsdown/ast_parser/node_records/#modules","text":"ArgumentRecord AttributeRecord ClassRecord ExpressionRecord FunctionRecord ImportRecord ModuleRecord NodeRecord TextRecord","title":"Modules"},{"location":"handsdown/ast_parser/node_records/argument_record/","text":"ArgumentRecord Handsdown API Index / Handsdown / AST Parser / Node Records / ArgumentRecord Auto-generated documentation for handsdown.ast_parser.node_records.argument_record module. ArgumentRecord find in source code Wrapper for an ast.arg node. Arguments node - AST node. name - Argument name. type_hint - Argument type hint. prefix - Prefix for arguemnt name, used for starargs. Signature class ArgumentRecord ( NodeRecord ): def __init__ ( self , node : ast . arg , name : str , type_hint : Optional [ ast . expr ] = None , prefix : str = \"\" , ) -> None : ... See also NodeRecord ArgumentRecord().default find in source code Default value of the argument. Returns Default exression or None. Signature @property def default ( self ) -> Optional [ ExpressionRecord ]: ... ArgumentRecord().related_names find in source code Set of related names. Signature @property def related_names ( self ) -> Set [ str ]: ... ArgumentRecord().required find in source code Whether the argument is required. Returns True if required, False otherwise. Signature @property def required ( self ) -> bool : ... ArgumentRecord().set_default find in source code Set default expression from test or ast.AST node. Arguments node - Text or AST node. Signature def set_default ( self , node : Node ) -> None : ... See also Node","title":"ArgumentRecord"},{"location":"handsdown/ast_parser/node_records/argument_record/#argumentrecord","text":"Handsdown API Index / Handsdown / AST Parser / Node Records / ArgumentRecord Auto-generated documentation for handsdown.ast_parser.node_records.argument_record module.","title":"ArgumentRecord"},{"location":"handsdown/ast_parser/node_records/argument_record/#argumentrecord_1","text":"find in source code Wrapper for an ast.arg node.","title":"ArgumentRecord"},{"location":"handsdown/ast_parser/node_records/argument_record/#arguments","text":"node - AST node. name - Argument name. type_hint - Argument type hint. prefix - Prefix for arguemnt name, used for starargs.","title":"Arguments"},{"location":"handsdown/ast_parser/node_records/argument_record/#signature","text":"class ArgumentRecord ( NodeRecord ): def __init__ ( self , node : ast . arg , name : str , type_hint : Optional [ ast . expr ] = None , prefix : str = \"\" , ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/argument_record/#see-also","text":"NodeRecord","title":"See also"},{"location":"handsdown/ast_parser/node_records/argument_record/#argumentrecorddefault","text":"find in source code Default value of the argument.","title":"ArgumentRecord().default"},{"location":"handsdown/ast_parser/node_records/argument_record/#returns","text":"Default exression or None.","title":"Returns"},{"location":"handsdown/ast_parser/node_records/argument_record/#signature_1","text":"@property def default ( self ) -> Optional [ ExpressionRecord ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/argument_record/#argumentrecordrelated_names","text":"find in source code Set of related names.","title":"ArgumentRecord().related_names"},{"location":"handsdown/ast_parser/node_records/argument_record/#signature_2","text":"@property def related_names ( self ) -> Set [ str ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/argument_record/#argumentrecordrequired","text":"find in source code Whether the argument is required.","title":"ArgumentRecord().required"},{"location":"handsdown/ast_parser/node_records/argument_record/#returns_1","text":"True if required, False otherwise.","title":"Returns"},{"location":"handsdown/ast_parser/node_records/argument_record/#signature_3","text":"@property def required ( self ) -> bool : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/argument_record/#argumentrecordset_default","text":"find in source code Set default expression from test or ast.AST node.","title":"ArgumentRecord().set_default"},{"location":"handsdown/ast_parser/node_records/argument_record/#arguments_1","text":"node - Text or AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/node_records/argument_record/#signature_4","text":"def set_default ( self , node : Node ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/argument_record/#see-also_1","text":"Node","title":"See also"},{"location":"handsdown/ast_parser/node_records/attribute_record/","text":"AttributeRecord Handsdown API Index / Handsdown / AST Parser / Node Records / AttributeRecord Auto-generated documentation for handsdown.ast_parser.node_records.attribute_record module. AttributeRecord find in source code Wrapper for an ast.Assign node of a module or class attribute. Arguments node - AST node. Signature class AttributeRecord ( NodeRecord ): def __init__ ( self , node : ast . Assign ) -> None : ... See also NodeRecord AttributeRecord().append_to find in source code Append AttributeRecord to NodeRecord. Signature def append_to ( self , node_record : NodeRecord ) -> None : ... See also NodeRecord AttributeRecord().related_names find in source code Set of related names. Signature @property def related_names ( self ) -> Set [ str ]: ... AttributeRecord().render find in source code Render attribute with docstring. Signature def render ( self ) -> str : ...","title":"AttributeRecord"},{"location":"handsdown/ast_parser/node_records/attribute_record/#attributerecord","text":"Handsdown API Index / Handsdown / AST Parser / Node Records / AttributeRecord Auto-generated documentation for handsdown.ast_parser.node_records.attribute_record module.","title":"AttributeRecord"},{"location":"handsdown/ast_parser/node_records/attribute_record/#attributerecord_1","text":"find in source code Wrapper for an ast.Assign node of a module or class attribute.","title":"AttributeRecord"},{"location":"handsdown/ast_parser/node_records/attribute_record/#arguments","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/node_records/attribute_record/#signature","text":"class AttributeRecord ( NodeRecord ): def __init__ ( self , node : ast . Assign ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/attribute_record/#see-also","text":"NodeRecord","title":"See also"},{"location":"handsdown/ast_parser/node_records/attribute_record/#attributerecordappend_to","text":"find in source code Append AttributeRecord to NodeRecord.","title":"AttributeRecord().append_to"},{"location":"handsdown/ast_parser/node_records/attribute_record/#signature_1","text":"def append_to ( self , node_record : NodeRecord ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/attribute_record/#see-also_1","text":"NodeRecord","title":"See also"},{"location":"handsdown/ast_parser/node_records/attribute_record/#attributerecordrelated_names","text":"find in source code Set of related names.","title":"AttributeRecord().related_names"},{"location":"handsdown/ast_parser/node_records/attribute_record/#signature_2","text":"@property def related_names ( self ) -> Set [ str ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/attribute_record/#attributerecordrender","text":"find in source code Render attribute with docstring.","title":"AttributeRecord().render"},{"location":"handsdown/ast_parser/node_records/attribute_record/#signature_3","text":"def render ( self ) -> str : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/class_record/","text":"ClassRecord Handsdown API Index / Handsdown / AST Parser / Node Records / ClassRecord Auto-generated documentation for handsdown.ast_parser.node_records.class_record module. ClassRecord find in source code Wrapper for an ast.ClassDef node. Arguments node - AST node. Signature class ClassRecord ( NodeRecord ): def __init__ ( self , node : ast . ClassDef ) -> None : ... See also NodeRecord ClassRecord().find_record find in source code Find child method or attribute record. Arguments name - Record name to lookup. Returns Itself or None. Signature def find_record ( self , name : str ) -> Optional [ NodeRecord ]: ... ClassRecord().get_public_methods find in source code Get Class public methods. Skips methods with names starting with _ and magic methods __ if they have no docstring. Method __init__ is always skipped. Returns A list of child records. Signature def get_public_methods ( self ) -> List [ FunctionRecord ]: ... ClassRecord().init_method find in source code Get the __init__ method. Signature @property def init_method ( self ) -> Optional [ FunctionRecord ]: ... ClassRecord().iter_records find in source code Iterate over Class public methods. Yields A child record. Signature def iter_records ( self ) -> Iterator [ NodeRecord ]: ... ClassRecord().related_names find in source code Set of related names. Signature @property def related_names ( self ) -> Set [ str ]: ...","title":"ClassRecord"},{"location":"handsdown/ast_parser/node_records/class_record/#classrecord","text":"Handsdown API Index / Handsdown / AST Parser / Node Records / ClassRecord Auto-generated documentation for handsdown.ast_parser.node_records.class_record module.","title":"ClassRecord"},{"location":"handsdown/ast_parser/node_records/class_record/#classrecord_1","text":"find in source code Wrapper for an ast.ClassDef node.","title":"ClassRecord"},{"location":"handsdown/ast_parser/node_records/class_record/#arguments","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/node_records/class_record/#signature","text":"class ClassRecord ( NodeRecord ): def __init__ ( self , node : ast . ClassDef ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/class_record/#see-also","text":"NodeRecord","title":"See also"},{"location":"handsdown/ast_parser/node_records/class_record/#classrecordfind_record","text":"find in source code Find child method or attribute record.","title":"ClassRecord().find_record"},{"location":"handsdown/ast_parser/node_records/class_record/#arguments_1","text":"name - Record name to lookup.","title":"Arguments"},{"location":"handsdown/ast_parser/node_records/class_record/#returns","text":"Itself or None.","title":"Returns"},{"location":"handsdown/ast_parser/node_records/class_record/#signature_1","text":"def find_record ( self , name : str ) -> Optional [ NodeRecord ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/class_record/#classrecordget_public_methods","text":"find in source code Get Class public methods. Skips methods with names starting with _ and magic methods __ if they have no docstring. Method __init__ is always skipped.","title":"ClassRecord().get_public_methods"},{"location":"handsdown/ast_parser/node_records/class_record/#returns_1","text":"A list of child records.","title":"Returns"},{"location":"handsdown/ast_parser/node_records/class_record/#signature_2","text":"def get_public_methods ( self ) -> List [ FunctionRecord ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/class_record/#classrecordinit_method","text":"find in source code Get the __init__ method.","title":"ClassRecord().init_method"},{"location":"handsdown/ast_parser/node_records/class_record/#signature_3","text":"@property def init_method ( self ) -> Optional [ FunctionRecord ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/class_record/#classrecorditer_records","text":"find in source code Iterate over Class public methods.","title":"ClassRecord().iter_records"},{"location":"handsdown/ast_parser/node_records/class_record/#yields","text":"A child record.","title":"Yields"},{"location":"handsdown/ast_parser/node_records/class_record/#signature_4","text":"def iter_records ( self ) -> Iterator [ NodeRecord ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/class_record/#classrecordrelated_names","text":"find in source code Set of related names.","title":"ClassRecord().related_names"},{"location":"handsdown/ast_parser/node_records/class_record/#signature_5","text":"@property def related_names ( self ) -> Set [ str ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/expression_record/","text":"ExpressionRecord Handsdown API Index / Handsdown / AST Parser / Node Records / ExpressionRecord Auto-generated documentation for handsdown.ast_parser.node_records.expression_record module. ExpressionRecord find in source code Wrapper for an ast.expr node. Arguments node - AST node. Signature class ExpressionRecord ( NodeRecord ): def __init__ ( self , node : ast . AST ) -> None : ... See also NodeRecord ExpressionRecord().related_names find in source code Set of related names. Signature @property def related_names ( self ) -> Set [ str ]: ... ExpressionRecord().render_str find in source code Render expression to a string. Signature def render_str ( self ) -> str : ...","title":"ExpressionRecord"},{"location":"handsdown/ast_parser/node_records/expression_record/#expressionrecord","text":"Handsdown API Index / Handsdown / AST Parser / Node Records / ExpressionRecord Auto-generated documentation for handsdown.ast_parser.node_records.expression_record module.","title":"ExpressionRecord"},{"location":"handsdown/ast_parser/node_records/expression_record/#expressionrecord_1","text":"find in source code Wrapper for an ast.expr node.","title":"ExpressionRecord"},{"location":"handsdown/ast_parser/node_records/expression_record/#arguments","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/node_records/expression_record/#signature","text":"class ExpressionRecord ( NodeRecord ): def __init__ ( self , node : ast . AST ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/expression_record/#see-also","text":"NodeRecord","title":"See also"},{"location":"handsdown/ast_parser/node_records/expression_record/#expressionrecordrelated_names","text":"find in source code Set of related names.","title":"ExpressionRecord().related_names"},{"location":"handsdown/ast_parser/node_records/expression_record/#signature_1","text":"@property def related_names ( self ) -> Set [ str ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/expression_record/#expressionrecordrender_str","text":"find in source code Render expression to a string.","title":"ExpressionRecord().render_str"},{"location":"handsdown/ast_parser/node_records/expression_record/#signature_2","text":"def render_str ( self ) -> str : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/function_record/","text":"FunctionRecord Handsdown API Index / Handsdown / AST Parser / Node Records / FunctionRecord Auto-generated documentation for handsdown.ast_parser.node_records.function_record module. FunctionRecord find in source code Wrapper for an ast.FunctionDef and ast.AsyncFunctionDef node. Arguments node - AST node. Signature class FunctionRecord ( NodeRecord ): def __init__ ( self , node : ASTFunctionDef , is_method : bool ) -> None : ... See also ASTFunctionDef NodeRecord FunctionRecord().is_init find in source code Returns True if function is an init method. Signature def is_init ( self ) -> bool : ... FunctionRecord().parse_type_comments find in source code Extract comment type annotations from a function definiition lines. Sets arguments_record to a new TextRecord for each found type annotaiton. Also sets return_type_hint to a TextRecord if function return type found. Signature def parse_type_comments ( self , lines : Iterable [ str ]) -> None : ... FunctionRecord().related_names find in source code Set of related names. Signature @property def related_names ( self ) -> Set [ str ]: ...","title":"FunctionRecord"},{"location":"handsdown/ast_parser/node_records/function_record/#functionrecord","text":"Handsdown API Index / Handsdown / AST Parser / Node Records / FunctionRecord Auto-generated documentation for handsdown.ast_parser.node_records.function_record module.","title":"FunctionRecord"},{"location":"handsdown/ast_parser/node_records/function_record/#functionrecord_1","text":"find in source code Wrapper for an ast.FunctionDef and ast.AsyncFunctionDef node.","title":"FunctionRecord"},{"location":"handsdown/ast_parser/node_records/function_record/#arguments","text":"node - AST node.","title":"Arguments"},{"location":"handsdown/ast_parser/node_records/function_record/#signature","text":"class FunctionRecord ( NodeRecord ): def __init__ ( self , node : ASTFunctionDef , is_method : bool ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/function_record/#see-also","text":"ASTFunctionDef NodeRecord","title":"See also"},{"location":"handsdown/ast_parser/node_records/function_record/#functionrecordis_init","text":"find in source code Returns True if function is an init method.","title":"FunctionRecord().is_init"},{"location":"handsdown/ast_parser/node_records/function_record/#signature_1","text":"def is_init ( self ) -> bool : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/function_record/#functionrecordparse_type_comments","text":"find in source code Extract comment type annotations from a function definiition lines. Sets arguments_record to a new TextRecord for each found type annotaiton. Also sets return_type_hint to a TextRecord if function return type found.","title":"FunctionRecord().parse_type_comments"},{"location":"handsdown/ast_parser/node_records/function_record/#signature_2","text":"def parse_type_comments ( self , lines : Iterable [ str ]) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/function_record/#functionrecordrelated_names","text":"find in source code Set of related names.","title":"FunctionRecord().related_names"},{"location":"handsdown/ast_parser/node_records/function_record/#signature_3","text":"@property def related_names ( self ) -> Set [ str ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/import_record/","text":"ImportRecord Handsdown API Index / Handsdown / AST Parser / Node Records / ImportRecord Auto-generated documentation for handsdown.ast_parser.node_records.import_record module. ImportRecord find in source code Wrapper for an ast.Import and ast.ImportFrom nodes. Arguments node - AST node. alias - AST node with import alias. Signature class ImportRecord ( NodeRecord ): def __init__ ( self , node : ASTImport , alias : ast . alias ) -> None : ... See also ASTImport NodeRecord ImportRecord().get_import_string find in source code Get import string from a node. Returns An absolute import string. Signature def get_import_string ( self ) -> ImportString : ... See also ImportString ImportRecord().match find in source code Check if name matches or stats with a local name. Examples import_node = ast . parse ( 'from my_module import Name as LocalName' ) import_record = ImportRecord ( import_node ) import_record . match ( 'LocalName' ) True import_record . match ( 'LocalName.child' ) True import_record . match ( 'OtherName' ) False import_record . match ( 'LocalNameOther' ) False Returns True if name is imported object itself on one of his children. Signature def match ( self , name : str ) -> Optional [ ImportString ]: ...","title":"ImportRecord"},{"location":"handsdown/ast_parser/node_records/import_record/#importrecord","text":"Handsdown API Index / Handsdown / AST Parser / Node Records / ImportRecord Auto-generated documentation for handsdown.ast_parser.node_records.import_record module.","title":"ImportRecord"},{"location":"handsdown/ast_parser/node_records/import_record/#importrecord_1","text":"find in source code Wrapper for an ast.Import and ast.ImportFrom nodes.","title":"ImportRecord"},{"location":"handsdown/ast_parser/node_records/import_record/#arguments","text":"node - AST node. alias - AST node with import alias.","title":"Arguments"},{"location":"handsdown/ast_parser/node_records/import_record/#signature","text":"class ImportRecord ( NodeRecord ): def __init__ ( self , node : ASTImport , alias : ast . alias ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/import_record/#see-also","text":"ASTImport NodeRecord","title":"See also"},{"location":"handsdown/ast_parser/node_records/import_record/#importrecordget_import_string","text":"find in source code Get import string from a node.","title":"ImportRecord().get_import_string"},{"location":"handsdown/ast_parser/node_records/import_record/#returns","text":"An absolute import string.","title":"Returns"},{"location":"handsdown/ast_parser/node_records/import_record/#signature_1","text":"def get_import_string ( self ) -> ImportString : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/import_record/#see-also_1","text":"ImportString","title":"See also"},{"location":"handsdown/ast_parser/node_records/import_record/#importrecordmatch","text":"find in source code Check if name matches or stats with a local name.","title":"ImportRecord().match"},{"location":"handsdown/ast_parser/node_records/import_record/#examples","text":"import_node = ast . parse ( 'from my_module import Name as LocalName' ) import_record = ImportRecord ( import_node ) import_record . match ( 'LocalName' ) True import_record . match ( 'LocalName.child' ) True import_record . match ( 'OtherName' ) False import_record . match ( 'LocalNameOther' ) False","title":"Examples"},{"location":"handsdown/ast_parser/node_records/import_record/#returns_1","text":"True if name is imported object itself on one of his children.","title":"Returns"},{"location":"handsdown/ast_parser/node_records/import_record/#signature_2","text":"def match ( self , name : str ) -> Optional [ ImportString ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/module_record/","text":"ModuleRecord Handsdown API Index / Handsdown / AST Parser / Node Records / ModuleRecord Auto-generated documentation for handsdown.ast_parser.node_records.module_record module. ModuleRecord find in source code Wrapper for an ast.Module node with corresponding node info. Responsible for parsing Python source as well. Arguments node - Result of ast.parse . Signature class ModuleRecord ( NodeRecord ): def __init__ ( self , node : ast . Module ) -> None : ... See also NodeRecord ModuleRecord().build_children find in source code Collect full information about Module child records. Used only when doc for this ModuleRecord is building. Signature def build_children ( self ) -> None : ... ModuleRecord.create_from_source find in source code Create new ModuleRecord from path. Arguments source_path - Path to a Python source file. import_string - File absolute import string. encoding - File encoding. Returns New ModuleRecord instance. Signature @classmethod def create_from_source ( cls , source_path : Path , import_string : ImportString , encoding : str = ENCODING ) -> \"ModuleRecord\" : ... See also ENCODING ImportString ModuleRecord().find_record find in source code Find child in the Module by an absolute or relative import string. Attributes import_string - record import string. Returns Found child record on None. Signature def find_record ( self , import_string : ImportString ) -> Optional [ NodeRecord ]: ... See also ImportString ModuleRecord().get_related_import_strings find in source code Get a set of related_names found in module class, function, method and attribute records. Returns A set of absolute import strings found. Signature def get_related_import_strings ( self , node_record : NodeRecord ) -> Set [ ImportString ]: ... See also NodeRecord ModuleRecord().is_init find in source code Check if this module is the init .py file. Returns True if this module is the init .py file. Signature def is_init ( self ) -> bool : ... ModuleRecord().iter_records find in source code Iterate over Module class, method and fucntion records. Yields A child record. Signature def iter_records ( self ) -> Iterator [ NodeRecord ]: ...","title":"ModuleRecord"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecord","text":"Handsdown API Index / Handsdown / AST Parser / Node Records / ModuleRecord Auto-generated documentation for handsdown.ast_parser.node_records.module_record module.","title":"ModuleRecord"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecord_1","text":"find in source code Wrapper for an ast.Module node with corresponding node info. Responsible for parsing Python source as well.","title":"ModuleRecord"},{"location":"handsdown/ast_parser/node_records/module_record/#arguments","text":"node - Result of ast.parse .","title":"Arguments"},{"location":"handsdown/ast_parser/node_records/module_record/#signature","text":"class ModuleRecord ( NodeRecord ): def __init__ ( self , node : ast . Module ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/module_record/#see-also","text":"NodeRecord","title":"See also"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecordbuild_children","text":"find in source code Collect full information about Module child records. Used only when doc for this ModuleRecord is building.","title":"ModuleRecord().build_children"},{"location":"handsdown/ast_parser/node_records/module_record/#signature_1","text":"def build_children ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecordcreate_from_source","text":"find in source code Create new ModuleRecord from path.","title":"ModuleRecord.create_from_source"},{"location":"handsdown/ast_parser/node_records/module_record/#arguments_1","text":"source_path - Path to a Python source file. import_string - File absolute import string. encoding - File encoding.","title":"Arguments"},{"location":"handsdown/ast_parser/node_records/module_record/#returns","text":"New ModuleRecord instance.","title":"Returns"},{"location":"handsdown/ast_parser/node_records/module_record/#signature_2","text":"@classmethod def create_from_source ( cls , source_path : Path , import_string : ImportString , encoding : str = ENCODING ) -> \"ModuleRecord\" : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/module_record/#see-also_1","text":"ENCODING ImportString","title":"See also"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecordfind_record","text":"find in source code Find child in the Module by an absolute or relative import string.","title":"ModuleRecord().find_record"},{"location":"handsdown/ast_parser/node_records/module_record/#attributes","text":"import_string - record import string.","title":"Attributes"},{"location":"handsdown/ast_parser/node_records/module_record/#returns_1","text":"Found child record on None.","title":"Returns"},{"location":"handsdown/ast_parser/node_records/module_record/#signature_3","text":"def find_record ( self , import_string : ImportString ) -> Optional [ NodeRecord ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/module_record/#see-also_2","text":"ImportString","title":"See also"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecordget_related_import_strings","text":"find in source code Get a set of related_names found in module class, function, method and attribute records.","title":"ModuleRecord().get_related_import_strings"},{"location":"handsdown/ast_parser/node_records/module_record/#returns_2","text":"A set of absolute import strings found.","title":"Returns"},{"location":"handsdown/ast_parser/node_records/module_record/#signature_4","text":"def get_related_import_strings ( self , node_record : NodeRecord ) -> Set [ ImportString ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/module_record/#see-also_3","text":"NodeRecord","title":"See also"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecordis_init","text":"find in source code Check if this module is the init .py file.","title":"ModuleRecord().is_init"},{"location":"handsdown/ast_parser/node_records/module_record/#returns_3","text":"True if this module is the init .py file.","title":"Returns"},{"location":"handsdown/ast_parser/node_records/module_record/#signature_5","text":"def is_init ( self ) -> bool : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/module_record/#modulerecorditer_records","text":"find in source code Iterate over Module class, method and fucntion records.","title":"ModuleRecord().iter_records"},{"location":"handsdown/ast_parser/node_records/module_record/#yields","text":"A child record.","title":"Yields"},{"location":"handsdown/ast_parser/node_records/module_record/#signature_6","text":"def iter_records ( self ) -> Iterator [ NodeRecord ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/node_record/","text":"NodeRecord Handsdown API Index / Handsdown / AST Parser / Node Records / NodeRecord Auto-generated documentation for handsdown.ast_parser.node_records.node_record module. NodeRecord find in source code Base class for all node records. Signature class NodeRecord : def __init__ ( self , node : ast . AST ) -> None : ... NodeRecord().class_name find in source code Record class name. Signature @property def class_name ( self ) -> str : ... NodeRecord().get_documented_attribute_strings find in source code Render each of attribute_records to a Markdown string. Includes name , docstring and value of an ArgumentRecord . Returns A list of rendered strings. Signature def get_documented_attribute_strings ( self ) -> List [ str ]: ... NodeRecord().line_number find in source code Return node line number in source. Returns A line number startign with 1. Signature @property def line_number ( self ) -> int : ... NodeRecord().line_number find in source code Signature @line_number . setter def line_number ( self , value : int ) -> None : ... NodeRecord().parse find in source code Get all information from a node. Executes only once if called multiple times. Signature def parse ( self ) -> None : ... NodeRecord().related_names find in source code Get a set of referenced object names in node . Returns an empty set, should be overriden by a child class. Returns A set of referenced object name. Signature @property def related_names ( self ) -> Set [ str ]: ... NodeRecord().render find in source code Render node to a string. Returns A string representation of node . Signature def render ( self ) -> str : ...","title":"NodeRecord"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecord","text":"Handsdown API Index / Handsdown / AST Parser / Node Records / NodeRecord Auto-generated documentation for handsdown.ast_parser.node_records.node_record module.","title":"NodeRecord"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecord_1","text":"find in source code Base class for all node records.","title":"NodeRecord"},{"location":"handsdown/ast_parser/node_records/node_record/#signature","text":"class NodeRecord : def __init__ ( self , node : ast . AST ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecordclass_name","text":"find in source code Record class name.","title":"NodeRecord().class_name"},{"location":"handsdown/ast_parser/node_records/node_record/#signature_1","text":"@property def class_name ( self ) -> str : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecordget_documented_attribute_strings","text":"find in source code Render each of attribute_records to a Markdown string. Includes name , docstring and value of an ArgumentRecord .","title":"NodeRecord().get_documented_attribute_strings"},{"location":"handsdown/ast_parser/node_records/node_record/#returns","text":"A list of rendered strings.","title":"Returns"},{"location":"handsdown/ast_parser/node_records/node_record/#signature_2","text":"def get_documented_attribute_strings ( self ) -> List [ str ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecordline_number","text":"find in source code Return node line number in source.","title":"NodeRecord().line_number"},{"location":"handsdown/ast_parser/node_records/node_record/#returns_1","text":"A line number startign with 1.","title":"Returns"},{"location":"handsdown/ast_parser/node_records/node_record/#signature_3","text":"@property def line_number ( self ) -> int : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecordline_number_1","text":"find in source code","title":"NodeRecord().line_number"},{"location":"handsdown/ast_parser/node_records/node_record/#signature_4","text":"@line_number . setter def line_number ( self , value : int ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecordparse","text":"find in source code Get all information from a node. Executes only once if called multiple times.","title":"NodeRecord().parse"},{"location":"handsdown/ast_parser/node_records/node_record/#signature_5","text":"def parse ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecordrelated_names","text":"find in source code Get a set of referenced object names in node . Returns an empty set, should be overriden by a child class.","title":"NodeRecord().related_names"},{"location":"handsdown/ast_parser/node_records/node_record/#returns_2","text":"A set of referenced object name.","title":"Returns"},{"location":"handsdown/ast_parser/node_records/node_record/#signature_6","text":"@property def related_names ( self ) -> Set [ str ]: ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/node_record/#noderecordrender","text":"find in source code Render node to a string.","title":"NodeRecord().render"},{"location":"handsdown/ast_parser/node_records/node_record/#returns_3","text":"A string representation of node .","title":"Returns"},{"location":"handsdown/ast_parser/node_records/node_record/#signature_7","text":"def render ( self ) -> str : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/text_record/","text":"TextRecord Handsdown API Index / Handsdown / AST Parser / Node Records / TextRecord Auto-generated documentation for handsdown.ast_parser.node_records.text_record module. TextRecord find in source code Wrapper for a text-only ast.expr node. Arguments node - Related AST node. text - Text to represent it. Signature class TextRecord ( ExpressionRecord ): def __init__ ( self , node : ast . AST , text : str ) -> None : ... See also ExpressionRecord TextRecord().related_names find in source code A list of fake ast.Name.id records inside the node. Examples TextRecord ( ast_node , 'Union[str, MyClass]' ) . related_names { 'Union' , 'str' , 'MyClass' } Returns A set of related names. Signature @property def related_names ( self ) -> Set [ str ]: ...","title":"TextRecord"},{"location":"handsdown/ast_parser/node_records/text_record/#textrecord","text":"Handsdown API Index / Handsdown / AST Parser / Node Records / TextRecord Auto-generated documentation for handsdown.ast_parser.node_records.text_record module.","title":"TextRecord"},{"location":"handsdown/ast_parser/node_records/text_record/#textrecord_1","text":"find in source code Wrapper for a text-only ast.expr node.","title":"TextRecord"},{"location":"handsdown/ast_parser/node_records/text_record/#arguments","text":"node - Related AST node. text - Text to represent it.","title":"Arguments"},{"location":"handsdown/ast_parser/node_records/text_record/#signature","text":"class TextRecord ( ExpressionRecord ): def __init__ ( self , node : ast . AST , text : str ) -> None : ...","title":"Signature"},{"location":"handsdown/ast_parser/node_records/text_record/#see-also","text":"ExpressionRecord","title":"See also"},{"location":"handsdown/ast_parser/node_records/text_record/#textrecordrelated_names","text":"find in source code A list of fake ast.Name.id records inside the node.","title":"TextRecord().related_names"},{"location":"handsdown/ast_parser/node_records/text_record/#examples","text":"TextRecord ( ast_node , 'Union[str, MyClass]' ) . related_names { 'Union' , 'str' , 'MyClass' }","title":"Examples"},{"location":"handsdown/ast_parser/node_records/text_record/#returns","text":"A set of related names.","title":"Returns"},{"location":"handsdown/ast_parser/node_records/text_record/#signature_1","text":"@property def related_names ( self ) -> Set [ str ]: ...","title":"Signature"},{"location":"handsdown/generators/","text":"Generators Handsdown API Index / Handsdown / Generators Auto-generated documentation for handsdown.generators module. Modules Base Material Rtd","title":"Generators"},{"location":"handsdown/generators/#generators","text":"Handsdown API Index / Handsdown / Generators Auto-generated documentation for handsdown.generators module.","title":"Generators"},{"location":"handsdown/generators/#modules","text":"Base Material Rtd","title":"Modules"},{"location":"handsdown/generators/base/","text":"Base Handsdown API Index / Handsdown / Generators / Base Auto-generated documentation for handsdown.generators.base module. BaseGenerator find in source code Attributes INDEX_NAME - Index filename: 'README.md' INDEX_TITLE - Index title: 'Index' insert_toc - Whether to add ToC to generated module docs: False Base documentation generator. Arguments project_name - Name of the project. input_path - Path to repo to generate docs. output_path - Path to folder with auto-generated docs to output. source_paths - List of paths to source files for generation. docstring_processor - Docstring converter to Markdown. loader - Loader for python modules. raise_errors - Raise LoaderError instead of silencing in. source_code_url - URL to source files to use instead of relative paths, useful for GitHub Pages . source_code_path - Path to local source code toc_depth - Maximum depth of child modules ToC encoding - File encoding Signature class BaseGenerator : def __init__ ( self , input_path : Path , output_path : Path , source_paths : Iterable [ Path ], project_name : Optional [ str ] = None , docstring_processor : Optional [ BaseDocstringProcessor ] = None , loader : Optional [ Loader ] = None , raise_errors : bool = False , source_code_url : Optional [ str ] = None , source_code_path : Optional [ Path ] = None , toc_depth : int = 1 , encoding : str = ENCODING , ) -> None : ... See also ENCODING BaseGenerator().cleanup_old_docs find in source code Remove old docs generated for this module. Signature def cleanup_old_docs ( self ) -> None : ... BaseGenerator().generate_doc find in source code Generate one module doc at once. Arguments source_path - Path to source file. Raises GeneratorError - If source_path not found in current repo. Signature def generate_doc ( self , source_path : Path ) -> None : ... BaseGenerator().generate_docs find in source code Generate all doc files at once. Signature def generate_docs ( self ) -> None : ... BaseGenerator().generate_external_configs find in source code Signature def generate_external_configs ( self , overwrite : bool ) -> None : ... BaseGenerator().generate_index find in source code Generate <output>/README.md file. Contains a Tree of all modules in the project. Signature def generate_index ( self ) -> None : ... BaseGenerator().get_children_module_records find in source code Get all module records that are children of this module. Signature def get_children_module_records ( self , parent : ModuleRecord ) -> List [ ModuleRecord ]: ... See also ModuleRecord BaseGenerator().get_external_configs_templates find in source code Get a tuple with pairs of template path to project path Signature def get_external_configs_templates ( self ) -> Tuple [ Tuple [ NicePath , NicePath ], ... ]: ... See also NicePath BaseGenerator().get_md_document find in source code Get or create MDDocument for module record. Signature def get_md_document ( self , module_record : ModuleRecord ) -> MDDocument : ... See also MDDocument ModuleRecord BaseGenerator().get_see_also_links find in source code Get links to other modules that are referenced in the docstring. Signature def get_see_also_links ( self , record : NodeRecord , module_record : ModuleRecord , md_document : MDDocument ) -> List [ str ]: ... See also MDDocument ModuleRecord NodeRecord BaseGenerator().replace_links find in source code Signature def replace_links ( self , module_record : ModuleRecord , record : NodeRecord , md_document : MDDocument , docstring : str , ) -> str : ... See also MDDocument ModuleRecord NodeRecord","title":"Base"},{"location":"handsdown/generators/base/#base","text":"Handsdown API Index / Handsdown / Generators / Base Auto-generated documentation for handsdown.generators.base module.","title":"Base"},{"location":"handsdown/generators/base/#basegenerator","text":"find in source code","title":"BaseGenerator"},{"location":"handsdown/generators/base/#attributes","text":"INDEX_NAME - Index filename: 'README.md' INDEX_TITLE - Index title: 'Index' insert_toc - Whether to add ToC to generated module docs: False Base documentation generator.","title":"Attributes"},{"location":"handsdown/generators/base/#arguments","text":"project_name - Name of the project. input_path - Path to repo to generate docs. output_path - Path to folder with auto-generated docs to output. source_paths - List of paths to source files for generation. docstring_processor - Docstring converter to Markdown. loader - Loader for python modules. raise_errors - Raise LoaderError instead of silencing in. source_code_url - URL to source files to use instead of relative paths, useful for GitHub Pages . source_code_path - Path to local source code toc_depth - Maximum depth of child modules ToC encoding - File encoding","title":"Arguments"},{"location":"handsdown/generators/base/#signature","text":"class BaseGenerator : def __init__ ( self , input_path : Path , output_path : Path , source_paths : Iterable [ Path ], project_name : Optional [ str ] = None , docstring_processor : Optional [ BaseDocstringProcessor ] = None , loader : Optional [ Loader ] = None , raise_errors : bool = False , source_code_url : Optional [ str ] = None , source_code_path : Optional [ Path ] = None , toc_depth : int = 1 , encoding : str = ENCODING , ) -> None : ...","title":"Signature"},{"location":"handsdown/generators/base/#see-also","text":"ENCODING","title":"See also"},{"location":"handsdown/generators/base/#basegeneratorcleanup_old_docs","text":"find in source code Remove old docs generated for this module.","title":"BaseGenerator().cleanup_old_docs"},{"location":"handsdown/generators/base/#signature_1","text":"def cleanup_old_docs ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/generators/base/#basegeneratorgenerate_doc","text":"find in source code Generate one module doc at once.","title":"BaseGenerator().generate_doc"},{"location":"handsdown/generators/base/#arguments_1","text":"source_path - Path to source file.","title":"Arguments"},{"location":"handsdown/generators/base/#raises","text":"GeneratorError - If source_path not found in current repo.","title":"Raises"},{"location":"handsdown/generators/base/#signature_2","text":"def generate_doc ( self , source_path : Path ) -> None : ...","title":"Signature"},{"location":"handsdown/generators/base/#basegeneratorgenerate_docs","text":"find in source code Generate all doc files at once.","title":"BaseGenerator().generate_docs"},{"location":"handsdown/generators/base/#signature_3","text":"def generate_docs ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/generators/base/#basegeneratorgenerate_external_configs","text":"find in source code","title":"BaseGenerator().generate_external_configs"},{"location":"handsdown/generators/base/#signature_4","text":"def generate_external_configs ( self , overwrite : bool ) -> None : ...","title":"Signature"},{"location":"handsdown/generators/base/#basegeneratorgenerate_index","text":"find in source code Generate <output>/README.md file. Contains a Tree of all modules in the project.","title":"BaseGenerator().generate_index"},{"location":"handsdown/generators/base/#signature_5","text":"def generate_index ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/generators/base/#basegeneratorget_children_module_records","text":"find in source code Get all module records that are children of this module.","title":"BaseGenerator().get_children_module_records"},{"location":"handsdown/generators/base/#signature_6","text":"def get_children_module_records ( self , parent : ModuleRecord ) -> List [ ModuleRecord ]: ...","title":"Signature"},{"location":"handsdown/generators/base/#see-also_1","text":"ModuleRecord","title":"See also"},{"location":"handsdown/generators/base/#basegeneratorget_external_configs_templates","text":"find in source code Get a tuple with pairs of template path to project path","title":"BaseGenerator().get_external_configs_templates"},{"location":"handsdown/generators/base/#signature_7","text":"def get_external_configs_templates ( self ) -> Tuple [ Tuple [ NicePath , NicePath ], ... ]: ...","title":"Signature"},{"location":"handsdown/generators/base/#see-also_2","text":"NicePath","title":"See also"},{"location":"handsdown/generators/base/#basegeneratorget_md_document","text":"find in source code Get or create MDDocument for module record.","title":"BaseGenerator().get_md_document"},{"location":"handsdown/generators/base/#signature_8","text":"def get_md_document ( self , module_record : ModuleRecord ) -> MDDocument : ...","title":"Signature"},{"location":"handsdown/generators/base/#see-also_3","text":"MDDocument ModuleRecord","title":"See also"},{"location":"handsdown/generators/base/#basegeneratorget_see_also_links","text":"find in source code Get links to other modules that are referenced in the docstring.","title":"BaseGenerator().get_see_also_links"},{"location":"handsdown/generators/base/#signature_9","text":"def get_see_also_links ( self , record : NodeRecord , module_record : ModuleRecord , md_document : MDDocument ) -> List [ str ]: ...","title":"Signature"},{"location":"handsdown/generators/base/#see-also_4","text":"MDDocument ModuleRecord NodeRecord","title":"See also"},{"location":"handsdown/generators/base/#basegeneratorreplace_links","text":"find in source code","title":"BaseGenerator().replace_links"},{"location":"handsdown/generators/base/#signature_10","text":"def replace_links ( self , module_record : ModuleRecord , record : NodeRecord , md_document : MDDocument , docstring : str , ) -> str : ...","title":"Signature"},{"location":"handsdown/generators/base/#see-also_5","text":"MDDocument ModuleRecord NodeRecord","title":"See also"},{"location":"handsdown/generators/material/","text":"Material Handsdown API Index / Handsdown / Generators / Material Auto-generated documentation for handsdown.generators.material module. MaterialGenerator find in source code Read the Docs documentation generator. Signature class MaterialGenerator ( BaseGenerator ): ... See also BaseGenerator MaterialGenerator().get_external_configs_templates find in source code Get a tuple with pairs of template path to project path Signature def get_external_configs_templates ( self ) -> Tuple [ Tuple [ NicePath , NicePath ], ... ]: ... See also NicePath","title":"Material"},{"location":"handsdown/generators/material/#material","text":"Handsdown API Index / Handsdown / Generators / Material Auto-generated documentation for handsdown.generators.material module.","title":"Material"},{"location":"handsdown/generators/material/#materialgenerator","text":"find in source code Read the Docs documentation generator.","title":"MaterialGenerator"},{"location":"handsdown/generators/material/#signature","text":"class MaterialGenerator ( BaseGenerator ): ...","title":"Signature"},{"location":"handsdown/generators/material/#see-also","text":"BaseGenerator","title":"See also"},{"location":"handsdown/generators/material/#materialgeneratorget_external_configs_templates","text":"find in source code Get a tuple with pairs of template path to project path","title":"MaterialGenerator().get_external_configs_templates"},{"location":"handsdown/generators/material/#signature_1","text":"def get_external_configs_templates ( self ) -> Tuple [ Tuple [ NicePath , NicePath ], ... ]: ...","title":"Signature"},{"location":"handsdown/generators/material/#see-also_1","text":"NicePath","title":"See also"},{"location":"handsdown/generators/rtd/","text":"Rtd Handsdown API Index / Handsdown / Generators / Rtd Auto-generated documentation for handsdown.generators.rtd module. RTDGenerator find in source code Read the Docs documentation generator. Signature class RTDGenerator ( BaseGenerator ): ... See also BaseGenerator","title":"Rtd"},{"location":"handsdown/generators/rtd/#rtd","text":"Handsdown API Index / Handsdown / Generators / Rtd Auto-generated documentation for handsdown.generators.rtd module.","title":"Rtd"},{"location":"handsdown/generators/rtd/#rtdgenerator","text":"find in source code Read the Docs documentation generator.","title":"RTDGenerator"},{"location":"handsdown/generators/rtd/#signature","text":"class RTDGenerator ( BaseGenerator ): ...","title":"Signature"},{"location":"handsdown/generators/rtd/#see-also","text":"BaseGenerator","title":"See also"},{"location":"handsdown/processors/","text":"Processors Handsdown API Index / Handsdown / Processors Auto-generated documentation for handsdown.processors module. Modules Base Docstring Processor PEP 257 Docstring Processor reStructuredText Docstring Processor Section SectionBlock SectionMap Smart","title":"Processors"},{"location":"handsdown/processors/#processors","text":"Handsdown API Index / Handsdown / Processors Auto-generated documentation for handsdown.processors module.","title":"Processors"},{"location":"handsdown/processors/#modules","text":"Base Docstring Processor PEP 257 Docstring Processor reStructuredText Docstring Processor Section SectionBlock SectionMap Smart","title":"Modules"},{"location":"handsdown/processors/base/","text":"Base Docstring Processor Handsdown API Index / Handsdown / Processors / Base Docstring Processor Auto-generated documentation for handsdown.processors.base module. BaseDocstringProcessor find in source code Base docstring processor. All docstring processors are based on top of it. Attributes line_re_map - Mapping of line regexp to format string for it section_name_map - Mapping of Section search key to Section title replace_map - Mapping of string to replace to replacer Signature class BaseDocstringProcessor : def __init__ ( self ) -> None : ... BaseDocstringProcessor().build_sections find in source code Parse docstring and split it to sections with arrays of strings. Arguments content - Object docstring. Returns A dictionary where key is a section name and value is a list of string sof this section. Signature def build_sections ( self , content : str ) -> SectionMap : ... See also SectionMap","title":"Base Docstring Processor"},{"location":"handsdown/processors/base/#base-docstring-processor","text":"Handsdown API Index / Handsdown / Processors / Base Docstring Processor Auto-generated documentation for handsdown.processors.base module.","title":"Base Docstring Processor"},{"location":"handsdown/processors/base/#basedocstringprocessor","text":"find in source code Base docstring processor. All docstring processors are based on top of it.","title":"BaseDocstringProcessor"},{"location":"handsdown/processors/base/#attributes","text":"line_re_map - Mapping of line regexp to format string for it section_name_map - Mapping of Section search key to Section title replace_map - Mapping of string to replace to replacer","title":"Attributes"},{"location":"handsdown/processors/base/#signature","text":"class BaseDocstringProcessor : def __init__ ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/processors/base/#basedocstringprocessorbuild_sections","text":"find in source code Parse docstring and split it to sections with arrays of strings.","title":"BaseDocstringProcessor().build_sections"},{"location":"handsdown/processors/base/#arguments","text":"content - Object docstring.","title":"Arguments"},{"location":"handsdown/processors/base/#returns","text":"A dictionary where key is a section name and value is a list of string sof this section.","title":"Returns"},{"location":"handsdown/processors/base/#signature_1","text":"def build_sections ( self , content : str ) -> SectionMap : ...","title":"Signature"},{"location":"handsdown/processors/base/#see-also","text":"SectionMap","title":"See also"},{"location":"handsdown/processors/pep257/","text":"PEP 257 Docstring Processor Handsdown API Index / Handsdown / Processors / PEP 257 Docstring Processor Auto-generated documentation for handsdown.processors.pep257 module. PEP257DocstringProcessor find in source code Docstring processor for PEP 257 and Google docstring format. Signature class PEP257DocstringProcessor ( BaseDocstringProcessor ): ... See also BaseDocstringProcessor","title":"PEP 257 Docstring Processor"},{"location":"handsdown/processors/pep257/#pep-257-docstring-processor","text":"Handsdown API Index / Handsdown / Processors / PEP 257 Docstring Processor Auto-generated documentation for handsdown.processors.pep257 module.","title":"PEP 257 Docstring Processor"},{"location":"handsdown/processors/pep257/#pep257docstringprocessor","text":"find in source code Docstring processor for PEP 257 and Google docstring format.","title":"PEP257DocstringProcessor"},{"location":"handsdown/processors/pep257/#signature","text":"class PEP257DocstringProcessor ( BaseDocstringProcessor ): ...","title":"Signature"},{"location":"handsdown/processors/pep257/#see-also","text":"BaseDocstringProcessor","title":"See also"},{"location":"handsdown/processors/rst/","text":"reStructuredText Docstring Processor Handsdown API Index / Handsdown / Processors / reStructuredText Docstring Processor Auto-generated documentation for handsdown.processors.rst module. RSTDocstringProcessor find in source code Docstring processor for restructured text docstring format. Signature class RSTDocstringProcessor ( BaseDocstringProcessor ): ... See also BaseDocstringProcessor","title":"reStructuredText Docstring Processor"},{"location":"handsdown/processors/rst/#restructuredtext-docstring-processor","text":"Handsdown API Index / Handsdown / Processors / reStructuredText Docstring Processor Auto-generated documentation for handsdown.processors.rst module.","title":"reStructuredText Docstring Processor"},{"location":"handsdown/processors/rst/#rstdocstringprocessor","text":"find in source code Docstring processor for restructured text docstring format.","title":"RSTDocstringProcessor"},{"location":"handsdown/processors/rst/#signature","text":"class RSTDocstringProcessor ( BaseDocstringProcessor ): ...","title":"Signature"},{"location":"handsdown/processors/rst/#see-also","text":"BaseDocstringProcessor","title":"See also"},{"location":"handsdown/processors/section/","text":"Section Handsdown API Index / Handsdown / Processors / Section Auto-generated documentation for handsdown.processors.section module. Section find in source code Section in a SectionMap . Arguments title - Section title. blocks - List of line blocks. Signature class Section : def __init__ ( self , title : str , blocks : Iterable [ SectionBlock ]) -> None : ... Section().iterate_blocks find in source code Iterate over all non-empty Section block lines. Returns Section block lines. Signature def iterate_blocks ( self ) -> Iterable [ SectionBlock ]: ... Section().render find in source code Render all Section block lines. Returns Section lines as a text. Signature def render ( self ) -> str : ...","title":"Section"},{"location":"handsdown/processors/section/#section","text":"Handsdown API Index / Handsdown / Processors / Section Auto-generated documentation for handsdown.processors.section module.","title":"Section"},{"location":"handsdown/processors/section/#section_1","text":"find in source code Section in a SectionMap .","title":"Section"},{"location":"handsdown/processors/section/#arguments","text":"title - Section title. blocks - List of line blocks.","title":"Arguments"},{"location":"handsdown/processors/section/#signature","text":"class Section : def __init__ ( self , title : str , blocks : Iterable [ SectionBlock ]) -> None : ...","title":"Signature"},{"location":"handsdown/processors/section/#sectioniterate_blocks","text":"find in source code Iterate over all non-empty Section block lines.","title":"Section().iterate_blocks"},{"location":"handsdown/processors/section/#returns","text":"Section block lines.","title":"Returns"},{"location":"handsdown/processors/section/#signature_1","text":"def iterate_blocks ( self ) -> Iterable [ SectionBlock ]: ...","title":"Signature"},{"location":"handsdown/processors/section/#sectionrender","text":"find in source code Render all Section block lines.","title":"Section().render"},{"location":"handsdown/processors/section/#returns_1","text":"Section lines as a text.","title":"Returns"},{"location":"handsdown/processors/section/#signature_2","text":"def render ( self ) -> str : ...","title":"Signature"},{"location":"handsdown/processors/section_block/","text":"SectionBlock Handsdown API Index / Handsdown / Processors / SectionBlock Auto-generated documentation for handsdown.processors.section_block module. SectionBlock find in source code Section block. Arguments lines - List of lines. Signature class SectionBlock : def __init__ ( self , lines : Iterable [ str ]) -> None : ... SectionBlock().render find in source code Render trimmed block lines. Returns Block lines as a text. Signature def render ( self ) -> str : ...","title":"SectionBlock"},{"location":"handsdown/processors/section_block/#sectionblock","text":"Handsdown API Index / Handsdown / Processors / SectionBlock Auto-generated documentation for handsdown.processors.section_block module.","title":"SectionBlock"},{"location":"handsdown/processors/section_block/#sectionblock_1","text":"find in source code Section block.","title":"SectionBlock"},{"location":"handsdown/processors/section_block/#arguments","text":"lines - List of lines.","title":"Arguments"},{"location":"handsdown/processors/section_block/#signature","text":"class SectionBlock : def __init__ ( self , lines : Iterable [ str ]) -> None : ...","title":"Signature"},{"location":"handsdown/processors/section_block/#sectionblockrender","text":"find in source code Render trimmed block lines.","title":"SectionBlock().render"},{"location":"handsdown/processors/section_block/#returns","text":"Block lines as a text.","title":"Returns"},{"location":"handsdown/processors/section_block/#signature_1","text":"def render ( self ) -> str : ...","title":"Signature"},{"location":"handsdown/processors/section_map/","text":"SectionMap Handsdown API Index / Handsdown / Processors / SectionMap Auto-generated documentation for handsdown.processors.section_map module. SectionMap find in source code Dict-based storage for parsed Section list. Used for BaseDocstringProcessor . Key is a Section title. Value is a related Section instance. Signature class SectionMap : def __init__ ( self ) -> None : ... SectionMap(). iter find in source code Iterate over existing Section objects. Yields Section objects in order of appearance. Signature def __iter__ ( self ) -> Iterator [ Section ]: ... SectionMap().add_block find in source code Add new SectionBlock to section section_name . If Section does not exist - it is not created. Arguments section_name - Target section title Signature def add_block ( self , section_name : str ) -> None : ... SectionMap().add_line find in source code Add new line to the last SectionBlock of section section_name . If line and section are empty - section is not created. Arguments section_name - Target section title line - Line to add Signature def add_line ( self , section_name : str , line : str ) -> None : ... SectionMap().add_line_indent find in source code Add line respecting indent of the current section block. Arguments section_name - Target section title line - Line to add Signature def add_line_indent ( self , section_name : str , line : str ) -> None : ... SectionMap().trim_block find in source code Delete last empty lines from the last SectionBlock . If Section does not exist - it is not created. Arguments section_name - Target section title. Signature def trim_block ( self , section_name : str ) -> None : ...","title":"SectionMap"},{"location":"handsdown/processors/section_map/#sectionmap","text":"Handsdown API Index / Handsdown / Processors / SectionMap Auto-generated documentation for handsdown.processors.section_map module.","title":"SectionMap"},{"location":"handsdown/processors/section_map/#sectionmap_1","text":"find in source code Dict-based storage for parsed Section list. Used for BaseDocstringProcessor . Key is a Section title. Value is a related Section instance.","title":"SectionMap"},{"location":"handsdown/processors/section_map/#signature","text":"class SectionMap : def __init__ ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/processors/section_map/#sectionmapiter","text":"find in source code Iterate over existing Section objects.","title":"SectionMap().iter"},{"location":"handsdown/processors/section_map/#yields","text":"Section objects in order of appearance.","title":"Yields"},{"location":"handsdown/processors/section_map/#signature_1","text":"def __iter__ ( self ) -> Iterator [ Section ]: ...","title":"Signature"},{"location":"handsdown/processors/section_map/#sectionmapadd_block","text":"find in source code Add new SectionBlock to section section_name . If Section does not exist - it is not created.","title":"SectionMap().add_block"},{"location":"handsdown/processors/section_map/#arguments","text":"section_name - Target section title","title":"Arguments"},{"location":"handsdown/processors/section_map/#signature_2","text":"def add_block ( self , section_name : str ) -> None : ...","title":"Signature"},{"location":"handsdown/processors/section_map/#sectionmapadd_line","text":"find in source code Add new line to the last SectionBlock of section section_name . If line and section are empty - section is not created.","title":"SectionMap().add_line"},{"location":"handsdown/processors/section_map/#arguments_1","text":"section_name - Target section title line - Line to add","title":"Arguments"},{"location":"handsdown/processors/section_map/#signature_3","text":"def add_line ( self , section_name : str , line : str ) -> None : ...","title":"Signature"},{"location":"handsdown/processors/section_map/#sectionmapadd_line_indent","text":"find in source code Add line respecting indent of the current section block.","title":"SectionMap().add_line_indent"},{"location":"handsdown/processors/section_map/#arguments_2","text":"section_name - Target section title line - Line to add","title":"Arguments"},{"location":"handsdown/processors/section_map/#signature_4","text":"def add_line_indent ( self , section_name : str , line : str ) -> None : ...","title":"Signature"},{"location":"handsdown/processors/section_map/#sectionmaptrim_block","text":"find in source code Delete last empty lines from the last SectionBlock . If Section does not exist - it is not created.","title":"SectionMap().trim_block"},{"location":"handsdown/processors/section_map/#arguments_3","text":"section_name - Target section title.","title":"Arguments"},{"location":"handsdown/processors/section_map/#signature_5","text":"def trim_block ( self , section_name : str ) -> None : ...","title":"Signature"},{"location":"handsdown/processors/smart/","text":"Smart Handsdown API Index / Handsdown / Processors / Smart Auto-generated documentation for handsdown.processors.smart module. SmartDocstringProcessor find in source code Docstring processor that selects a DocstringProcessor based on a docstring content. Signature class SmartDocstringProcessor ( BaseDocstringProcessor ): def __init__ ( self ) -> None : ... See also BaseDocstringProcessor SmartDocstringProcessor().build_sections find in source code Parse docstring and split it to sections with arrays of strings. Arguments content - Object docstring. Returns A dictionary where key is a section name and value is a list of string sof this section. Signature def build_sections ( self , content : str ) -> SectionMap : ... See also SectionMap","title":"Smart"},{"location":"handsdown/processors/smart/#smart","text":"Handsdown API Index / Handsdown / Processors / Smart Auto-generated documentation for handsdown.processors.smart module.","title":"Smart"},{"location":"handsdown/processors/smart/#smartdocstringprocessor","text":"find in source code Docstring processor that selects a DocstringProcessor based on a docstring content.","title":"SmartDocstringProcessor"},{"location":"handsdown/processors/smart/#signature","text":"class SmartDocstringProcessor ( BaseDocstringProcessor ): def __init__ ( self ) -> None : ...","title":"Signature"},{"location":"handsdown/processors/smart/#see-also","text":"BaseDocstringProcessor","title":"See also"},{"location":"handsdown/processors/smart/#smartdocstringprocessorbuild_sections","text":"find in source code Parse docstring and split it to sections with arrays of strings.","title":"SmartDocstringProcessor().build_sections"},{"location":"handsdown/processors/smart/#arguments","text":"content - Object docstring.","title":"Arguments"},{"location":"handsdown/processors/smart/#returns","text":"A dictionary where key is a section name and value is a list of string sof this section.","title":"Returns"},{"location":"handsdown/processors/smart/#signature_1","text":"def build_sections ( self , content : str ) -> SectionMap : ...","title":"Signature"},{"location":"handsdown/processors/smart/#see-also_1","text":"SectionMap","title":"See also"},{"location":"handsdown/utils/","text":"Utils Handsdown API Index / Handsdown / Utils Auto-generated documentation for handsdown.utils module. Modules Blackify DocstringFormatter ImportString IndentTrimmer Logger Markdown NicePath PathFinder Strings","title":"Utils"},{"location":"handsdown/utils/#utils","text":"Handsdown API Index / Handsdown / Utils Auto-generated documentation for handsdown.utils module.","title":"Utils"},{"location":"handsdown/utils/#modules","text":"Blackify DocstringFormatter ImportString IndentTrimmer Logger Markdown NicePath PathFinder Strings","title":"Modules"},{"location":"handsdown/utils/blackify/","text":"Blackify Handsdown API Index / Handsdown / Utils / Blackify Auto-generated documentation for handsdown.utils.blackify module. blackify find in source code Format content with black . Arguments content - Python code to format. Returns Formatted python code. Raises ValueError - If content is not a valid Python code. Signature def blackify ( content : str ) -> str : ...","title":"Blackify"},{"location":"handsdown/utils/blackify/#blackify","text":"Handsdown API Index / Handsdown / Utils / Blackify Auto-generated documentation for handsdown.utils.blackify module.","title":"Blackify"},{"location":"handsdown/utils/blackify/#blackify_1","text":"find in source code Format content with black .","title":"blackify"},{"location":"handsdown/utils/blackify/#arguments","text":"content - Python code to format.","title":"Arguments"},{"location":"handsdown/utils/blackify/#returns","text":"Formatted python code.","title":"Returns"},{"location":"handsdown/utils/blackify/#raises","text":"ValueError - If content is not a valid Python code.","title":"Raises"},{"location":"handsdown/utils/blackify/#signature","text":"def blackify ( content : str ) -> str : ...","title":"Signature"},{"location":"handsdown/utils/docstring_formatter/","text":"DocstringFormatter Handsdown API Index / Handsdown / Utils / DocstringFormatter Auto-generated documentation for handsdown.utils.docstring_formatter module. DocstringFormatter find in source code Translator of docstrings to Markdown format. Arguments docstring - Raw docstring. Signature class DocstringFormatter : def __init__ ( self , docstring : str ) -> None : ... DocstringFormatter().render find in source code Get Markdown-friendly docstring. Returns A cleaned up docstring. Signature def render ( self ) -> str : ...","title":"DocstringFormatter"},{"location":"handsdown/utils/docstring_formatter/#docstringformatter","text":"Handsdown API Index / Handsdown / Utils / DocstringFormatter Auto-generated documentation for handsdown.utils.docstring_formatter module.","title":"DocstringFormatter"},{"location":"handsdown/utils/docstring_formatter/#docstringformatter_1","text":"find in source code Translator of docstrings to Markdown format.","title":"DocstringFormatter"},{"location":"handsdown/utils/docstring_formatter/#arguments","text":"docstring - Raw docstring.","title":"Arguments"},{"location":"handsdown/utils/docstring_formatter/#signature","text":"class DocstringFormatter : def __init__ ( self , docstring : str ) -> None : ...","title":"Signature"},{"location":"handsdown/utils/docstring_formatter/#docstringformatterrender","text":"find in source code Get Markdown-friendly docstring.","title":"DocstringFormatter().render"},{"location":"handsdown/utils/docstring_formatter/#returns","text":"A cleaned up docstring.","title":"Returns"},{"location":"handsdown/utils/docstring_formatter/#signature_1","text":"def render ( self ) -> str : ...","title":"Signature"},{"location":"handsdown/utils/import_string/","text":"ImportString Handsdown API Index / Handsdown / Utils / ImportString Auto-generated documentation for handsdown.utils.import_string module. ImportString find in source code Wrapper for python import strings. Arguments value - Import string. Signature class ImportString : def __init__ ( self , value : str ) -> None : ... ImportString(). add find in source code Add new import part. Examples ImportString ( \"my_module\" ) + \"MyClass\" ImportString ( \"my_module.MyClass\" ) ImportString ( \"\" ) + \"MyClass\" ImportString ( \"MyClass\" ) Arguments other - Import string part. Returns A new ImportString instance. Signature def __add__ ( self , other : str ) -> \"ImportString\" : ... ImportString(). bool find in source code Check if not empty. Examples bool ( ImportString ( \"my_module\" )) True bool ( ImportString ( \"\" )) False Returns True if not empty. Signature def __bool__ ( self ) -> bool : ... ImportString(). eq find in source code Compare to another ImportString or a string. Examples ImportString ( \"my_module.MyClass\" ) == ImportString ( \"my_module.MyClass\" ) True ImportString ( \"my_module.MyClass\" ) == ImportString ( \"my_module.OtherClass\" ) False ImportString ( \"my_module.MyClass\" ) == \"my_module.MyClass\" True ImportString ( \"my_module.MyClass\" ) == \"my_module\" False ImportString ( \"my_module.MyClass\" ) == b \"my_module.MyClass\" False Arguments other - ImportString instance or a string. Returns True if import strings are equal. Signature def __eq__ ( self , other : Any ) -> bool : ... ImportString(). str find in source code Get string value. Examples str ( ImportString ( \"my_module\" )) \"my_module\" Returns Original import string. Signature def __str__ ( self ) -> str : ... ImportString().get_parents find in source code Get all parents. Returns A list of ImportString instances. Signature def get_parents ( self : _R ) -> List [ _R ]: ... ImportString().is_top_level find in source code Check if import string has no parents. Returns True if it has no parents. Signature def is_top_level ( self ) -> bool : ... ImportString().length find in source code Length of import string parts. Returns Length of import string. Signature @property def length ( self ) -> int : ... ImportString().name find in source code Last part of the import string. Signature @property def name ( self ) -> str : ... ImportString().parent find in source code Parent import string. Returns A new ImportString instance. Signature @property def parent ( self : _R ) -> _R : ... ImportString().parts find in source code Parts of import string splitted by dots. Examples ImportString ( \"my_module.MyClass\" ) [ \"my_module\" , \"MyClass\" ] ImportString ( \"\" ) [] Returns A list of import string parts. Signature @property def parts ( self ) -> List [ str ]: ... ImportString().startswith find in source code Check if it starts with import_string . Returns True if it is a child. Signature def startswith ( self : _R , import_string : _R ) -> bool : ...","title":"ImportString"},{"location":"handsdown/utils/import_string/#importstring","text":"Handsdown API Index / Handsdown / Utils / ImportString Auto-generated documentation for handsdown.utils.import_string module.","title":"ImportString"},{"location":"handsdown/utils/import_string/#importstring_1","text":"find in source code Wrapper for python import strings.","title":"ImportString"},{"location":"handsdown/utils/import_string/#arguments","text":"value - Import string.","title":"Arguments"},{"location":"handsdown/utils/import_string/#signature","text":"class ImportString : def __init__ ( self , value : str ) -> None : ...","title":"Signature"},{"location":"handsdown/utils/import_string/#importstringadd","text":"find in source code Add new import part.","title":"ImportString().add"},{"location":"handsdown/utils/import_string/#examples","text":"ImportString ( \"my_module\" ) + \"MyClass\" ImportString ( \"my_module.MyClass\" ) ImportString ( \"\" ) + \"MyClass\" ImportString ( \"MyClass\" )","title":"Examples"},{"location":"handsdown/utils/import_string/#arguments_1","text":"other - Import string part.","title":"Arguments"},{"location":"handsdown/utils/import_string/#returns","text":"A new ImportString instance.","title":"Returns"},{"location":"handsdown/utils/import_string/#signature_1","text":"def __add__ ( self , other : str ) -> \"ImportString\" : ...","title":"Signature"},{"location":"handsdown/utils/import_string/#importstringbool","text":"find in source code Check if not empty.","title":"ImportString().bool"},{"location":"handsdown/utils/import_string/#examples_1","text":"bool ( ImportString ( \"my_module\" )) True bool ( ImportString ( \"\" )) False","title":"Examples"},{"location":"handsdown/utils/import_string/#returns_1","text":"True if not empty.","title":"Returns"},{"location":"handsdown/utils/import_string/#signature_2","text":"def __bool__ ( self ) -> bool : ...","title":"Signature"},{"location":"handsdown/utils/import_string/#importstringeq","text":"find in source code Compare to another ImportString or a string.","title":"ImportString().eq"},{"location":"handsdown/utils/import_string/#examples_2","text":"ImportString ( \"my_module.MyClass\" ) == ImportString ( \"my_module.MyClass\" ) True ImportString ( \"my_module.MyClass\" ) == ImportString ( \"my_module.OtherClass\" ) False ImportString ( \"my_module.MyClass\" ) == \"my_module.MyClass\" True ImportString ( \"my_module.MyClass\" ) == \"my_module\" False ImportString ( \"my_module.MyClass\" ) == b \"my_module.MyClass\" False","title":"Examples"},{"location":"handsdown/utils/import_string/#arguments_2","text":"other - ImportString instance or a string.","title":"Arguments"},{"location":"handsdown/utils/import_string/#returns_2","text":"True if import strings are equal.","title":"Returns"},{"location":"handsdown/utils/import_string/#signature_3","text":"def __eq__ ( self , other : Any ) -> bool : ...","title":"Signature"},{"location":"handsdown/utils/import_string/#importstringstr","text":"find in source code Get string value.","title":"ImportString().str"},{"location":"handsdown/utils/import_string/#examples_3","text":"str ( ImportString ( \"my_module\" )) \"my_module\"","title":"Examples"},{"location":"handsdown/utils/import_string/#returns_3","text":"Original import string.","title":"Returns"},{"location":"handsdown/utils/import_string/#signature_4","text":"def __str__ ( self ) -> str : ...","title":"Signature"},{"location":"handsdown/utils/import_string/#importstringget_parents","text":"find in source code Get all parents.","title":"ImportString().get_parents"},{"location":"handsdown/utils/import_string/#returns_4","text":"A list of ImportString instances.","title":"Returns"},{"location":"handsdown/utils/import_string/#signature_5","text":"def get_parents ( self : _R ) -> List [ _R ]: ...","title":"Signature"},{"location":"handsdown/utils/import_string/#importstringis_top_level","text":"find in source code Check if import string has no parents.","title":"ImportString().is_top_level"},{"location":"handsdown/utils/import_string/#returns_5","text":"True if it has no parents.","title":"Returns"},{"location":"handsdown/utils/import_string/#signature_6","text":"def is_top_level ( self ) -> bool : ...","title":"Signature"},{"location":"handsdown/utils/import_string/#importstringlength","text":"find in source code Length of import string parts.","title":"ImportString().length"},{"location":"handsdown/utils/import_string/#returns_6","text":"Length of import string.","title":"Returns"},{"location":"handsdown/utils/import_string/#signature_7","text":"@property def length ( self ) -> int : ...","title":"Signature"},{"location":"handsdown/utils/import_string/#importstringname","text":"find in source code Last part of the import string.","title":"ImportString().name"},{"location":"handsdown/utils/import_string/#signature_8","text":"@property def name ( self ) -> str : ...","title":"Signature"},{"location":"handsdown/utils/import_string/#importstringparent","text":"find in source code Parent import string.","title":"ImportString().parent"},{"location":"handsdown/utils/import_string/#returns_7","text":"A new ImportString instance.","title":"Returns"},{"location":"handsdown/utils/import_string/#signature_9","text":"@property def parent ( self : _R ) -> _R : ...","title":"Signature"},{"location":"handsdown/utils/import_string/#importstringparts","text":"find in source code Parts of import string splitted by dots.","title":"ImportString().parts"},{"location":"handsdown/utils/import_string/#examples_4","text":"ImportString ( \"my_module.MyClass\" ) [ \"my_module\" , \"MyClass\" ] ImportString ( \"\" ) []","title":"Examples"},{"location":"handsdown/utils/import_string/#returns_8","text":"A list of import string parts.","title":"Returns"},{"location":"handsdown/utils/import_string/#signature_10","text":"@property def parts ( self ) -> List [ str ]: ...","title":"Signature"},{"location":"handsdown/utils/import_string/#importstringstartswith","text":"find in source code Check if it starts with import_string .","title":"ImportString().startswith"},{"location":"handsdown/utils/import_string/#returns_9","text":"True if it is a child.","title":"Returns"},{"location":"handsdown/utils/import_string/#signature_11","text":"def startswith ( self : _R , import_string : _R ) -> bool : ...","title":"Signature"},{"location":"handsdown/utils/indent_trimmer/","text":"IndentTrimmer Handsdown API Index / Handsdown / Utils / IndentTrimmer Auto-generated documentation for handsdown.utils.indent_trimmer module. IndentTrimmer find in source code Utility for removing indentation for sections and lines. Signature class IndentTrimmer : ... IndentTrimmer.get_line_indent find in source code Get indent length of the line. Examples IndentTrimmer . get_line_indent ( ' test' ) 3 IndentTrimmer . get_line_indent ( 'test' ) 0 Arguments line - Line of text. Returns A number of indentation characters in a beginning of the line. Signature @staticmethod def get_line_indent ( line : str ) -> int : ... IndentTrimmer.indent_line find in source code Indent line with givent length indent . Examples IndentTrimmer . indent_line ( 'test' , 2 ) ' test' Arguments line - Line to indent. indent - Length of indent in spaces. Returns An indented line. Signature @staticmethod def indent_line ( line : str , indent : int ) -> str : ... IndentTrimmer.trim_empty_lines find in source code Trim empty lines in the begging and the end of the text. Examples text = ' \\n \\n test \\n test2 \\n \\n ' IndentTrimmer . trim_empty_lines ( text ) ' test \\n test2' Returns A stripped string. Signature @staticmethod def trim_empty_lines ( text : str ) -> str : ... IndentTrimmer.trim_line find in source code Trim indent from line if it is empty. Examples IndentTrimmer . trim_line ( ' test' , 2 ) ' test' IndentTrimmer . trim_line ( ' test' , 6 ) 'test' IndentTrimmer . trim_line ( ' test' , 1 ) ' test' Arguments line - A line of text. Returns A line with removed indent. Signature @staticmethod def trim_line ( line : str , indent : int ) -> str : ... IndentTrimmer.trim_lines find in source code Trim minimum indent from each line of text. Examples IndentTrimmer . trim_lines ([ ' asd' , ' asd' , ' asd' , ]) [ ' asd' , 'asd' , ' asd' , ] Arguments lines - List of lines. Returns A list of lines with trimmed indent. Signature @classmethod def trim_lines ( cls , lines : Iterable [ str ]) -> List [ str ]: ... IndentTrimmer.trim_text find in source code Trim minimum indent from each line of text. Examples IndentTrimmer . trim_text ( ' asd \\n asd \\n asd \\n ' ) ' asd \\n asd \\n asd \\n ' Arguments text - Multiline text. Returns A text with trimmed indent. Signature @classmethod def trim_text ( cls , text : str ) -> str : ...","title":"IndentTrimmer"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmer","text":"Handsdown API Index / Handsdown / Utils / IndentTrimmer Auto-generated documentation for handsdown.utils.indent_trimmer module.","title":"IndentTrimmer"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmer_1","text":"find in source code Utility for removing indentation for sections and lines.","title":"IndentTrimmer"},{"location":"handsdown/utils/indent_trimmer/#signature","text":"class IndentTrimmer : ...","title":"Signature"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmerget_line_indent","text":"find in source code Get indent length of the line.","title":"IndentTrimmer.get_line_indent"},{"location":"handsdown/utils/indent_trimmer/#examples","text":"IndentTrimmer . get_line_indent ( ' test' ) 3 IndentTrimmer . get_line_indent ( 'test' ) 0","title":"Examples"},{"location":"handsdown/utils/indent_trimmer/#arguments","text":"line - Line of text.","title":"Arguments"},{"location":"handsdown/utils/indent_trimmer/#returns","text":"A number of indentation characters in a beginning of the line.","title":"Returns"},{"location":"handsdown/utils/indent_trimmer/#signature_1","text":"@staticmethod def get_line_indent ( line : str ) -> int : ...","title":"Signature"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmerindent_line","text":"find in source code Indent line with givent length indent .","title":"IndentTrimmer.indent_line"},{"location":"handsdown/utils/indent_trimmer/#examples_1","text":"IndentTrimmer . indent_line ( 'test' , 2 ) ' test'","title":"Examples"},{"location":"handsdown/utils/indent_trimmer/#arguments_1","text":"line - Line to indent. indent - Length of indent in spaces.","title":"Arguments"},{"location":"handsdown/utils/indent_trimmer/#returns_1","text":"An indented line.","title":"Returns"},{"location":"handsdown/utils/indent_trimmer/#signature_2","text":"@staticmethod def indent_line ( line : str , indent : int ) -> str : ...","title":"Signature"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmertrim_empty_lines","text":"find in source code Trim empty lines in the begging and the end of the text.","title":"IndentTrimmer.trim_empty_lines"},{"location":"handsdown/utils/indent_trimmer/#examples_2","text":"text = ' \\n \\n test \\n test2 \\n \\n ' IndentTrimmer . trim_empty_lines ( text ) ' test \\n test2'","title":"Examples"},{"location":"handsdown/utils/indent_trimmer/#returns_2","text":"A stripped string.","title":"Returns"},{"location":"handsdown/utils/indent_trimmer/#signature_3","text":"@staticmethod def trim_empty_lines ( text : str ) -> str : ...","title":"Signature"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmertrim_line","text":"find in source code Trim indent from line if it is empty.","title":"IndentTrimmer.trim_line"},{"location":"handsdown/utils/indent_trimmer/#examples_3","text":"IndentTrimmer . trim_line ( ' test' , 2 ) ' test' IndentTrimmer . trim_line ( ' test' , 6 ) 'test' IndentTrimmer . trim_line ( ' test' , 1 ) ' test'","title":"Examples"},{"location":"handsdown/utils/indent_trimmer/#arguments_2","text":"line - A line of text.","title":"Arguments"},{"location":"handsdown/utils/indent_trimmer/#returns_3","text":"A line with removed indent.","title":"Returns"},{"location":"handsdown/utils/indent_trimmer/#signature_4","text":"@staticmethod def trim_line ( line : str , indent : int ) -> str : ...","title":"Signature"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmertrim_lines","text":"find in source code Trim minimum indent from each line of text.","title":"IndentTrimmer.trim_lines"},{"location":"handsdown/utils/indent_trimmer/#examples_4","text":"IndentTrimmer . trim_lines ([ ' asd' , ' asd' , ' asd' , ]) [ ' asd' , 'asd' , ' asd' , ]","title":"Examples"},{"location":"handsdown/utils/indent_trimmer/#arguments_3","text":"lines - List of lines.","title":"Arguments"},{"location":"handsdown/utils/indent_trimmer/#returns_4","text":"A list of lines with trimmed indent.","title":"Returns"},{"location":"handsdown/utils/indent_trimmer/#signature_5","text":"@classmethod def trim_lines ( cls , lines : Iterable [ str ]) -> List [ str ]: ...","title":"Signature"},{"location":"handsdown/utils/indent_trimmer/#indenttrimmertrim_text","text":"find in source code Trim minimum indent from each line of text.","title":"IndentTrimmer.trim_text"},{"location":"handsdown/utils/indent_trimmer/#examples_5","text":"IndentTrimmer . trim_text ( ' asd \\n asd \\n asd \\n ' ) ' asd \\n asd \\n asd \\n '","title":"Examples"},{"location":"handsdown/utils/indent_trimmer/#arguments_4","text":"text - Multiline text.","title":"Arguments"},{"location":"handsdown/utils/indent_trimmer/#returns_5","text":"A text with trimmed indent.","title":"Returns"},{"location":"handsdown/utils/indent_trimmer/#signature_6","text":"@classmethod def trim_text ( cls , text : str ) -> str : ...","title":"Signature"},{"location":"handsdown/utils/logger/","text":"Logger Handsdown API Index / Handsdown / Utils / Logger Auto-generated documentation for handsdown.utils.logger module. get_logger find in source code Get stdout stream logger. Arguments level - Desired logging level. Returns A logging.Logger instance. Signature def get_logger ( level : Optional [ int ] = None ) -> logging . Logger : ...","title":"Logger"},{"location":"handsdown/utils/logger/#logger","text":"Handsdown API Index / Handsdown / Utils / Logger Auto-generated documentation for handsdown.utils.logger module.","title":"Logger"},{"location":"handsdown/utils/logger/#get_logger","text":"find in source code Get stdout stream logger.","title":"get_logger"},{"location":"handsdown/utils/logger/#arguments","text":"level - Desired logging level.","title":"Arguments"},{"location":"handsdown/utils/logger/#returns","text":"A logging.Logger instance.","title":"Returns"},{"location":"handsdown/utils/logger/#signature","text":"def get_logger ( level : Optional [ int ] = None ) -> logging . Logger : ...","title":"Signature"},{"location":"handsdown/utils/markdown/","text":"Markdown Handsdown API Index / Handsdown / Utils / Markdown Auto-generated documentation for handsdown.utils.markdown module. Header find in source code Markdown header. Arguments title - Header title level - Header level, 1-6 anchor - Anchor link Signature class Header : def __init__ ( self , title : str , level : int , anchor : str ) -> None : ... Header().render find in source code Render menu item to string. Signature def render ( self ) -> str : ... TableOfContents find in source code MarkDown Table of Contents. Arguments headers - List of headers Signature class TableOfContents : def __init__ ( self , headers : Iterable [ Header ]) -> None : ... TableOfContents.parse find in source code Parse table of Contents for MarkDown text. Arguments text - MarkDown text. Signature @classmethod def parse ( cls : Type [ _R ], text : str ) -> _R : ... TableOfContents().render find in source code Render ToC to string. Signature def render ( self , max_level : int = 3 ) -> str : ... insert_md_toc find in source code Insert Table of Contents before the first second-level header. Signature def insert_md_toc ( text : str , depth : int = 3 ) -> str : ...","title":"Markdown"},{"location":"handsdown/utils/markdown/#markdown","text":"Handsdown API Index / Handsdown / Utils / Markdown Auto-generated documentation for handsdown.utils.markdown module.","title":"Markdown"},{"location":"handsdown/utils/markdown/#header","text":"find in source code Markdown header.","title":"Header"},{"location":"handsdown/utils/markdown/#arguments","text":"title - Header title level - Header level, 1-6 anchor - Anchor link","title":"Arguments"},{"location":"handsdown/utils/markdown/#signature","text":"class Header : def __init__ ( self , title : str , level : int , anchor : str ) -> None : ...","title":"Signature"},{"location":"handsdown/utils/markdown/#headerrender","text":"find in source code Render menu item to string.","title":"Header().render"},{"location":"handsdown/utils/markdown/#signature_1","text":"def render ( self ) -> str : ...","title":"Signature"},{"location":"handsdown/utils/markdown/#tableofcontents","text":"find in source code MarkDown Table of Contents.","title":"TableOfContents"},{"location":"handsdown/utils/markdown/#arguments_1","text":"headers - List of headers","title":"Arguments"},{"location":"handsdown/utils/markdown/#signature_2","text":"class TableOfContents : def __init__ ( self , headers : Iterable [ Header ]) -> None : ...","title":"Signature"},{"location":"handsdown/utils/markdown/#tableofcontentsparse","text":"find in source code Parse table of Contents for MarkDown text.","title":"TableOfContents.parse"},{"location":"handsdown/utils/markdown/#arguments_2","text":"text - MarkDown text.","title":"Arguments"},{"location":"handsdown/utils/markdown/#signature_3","text":"@classmethod def parse ( cls : Type [ _R ], text : str ) -> _R : ...","title":"Signature"},{"location":"handsdown/utils/markdown/#tableofcontentsrender","text":"find in source code Render ToC to string.","title":"TableOfContents().render"},{"location":"handsdown/utils/markdown/#signature_4","text":"def render ( self , max_level : int = 3 ) -> str : ...","title":"Signature"},{"location":"handsdown/utils/markdown/#insert_md_toc","text":"find in source code Insert Table of Contents before the first second-level header.","title":"insert_md_toc"},{"location":"handsdown/utils/markdown/#signature_5","text":"def insert_md_toc ( text : str , depth : int = 3 ) -> str : ...","title":"Signature"},{"location":"handsdown/utils/nice_path/","text":"NicePath Handsdown API Index / Handsdown / Utils / NicePath Auto-generated documentation for handsdown.utils.nice_path module. NicePath find in source code Path that represents it as relative to workdir. Signature class NicePath ( type ( Path ())): ... NicePath().rmtree find in source code Remove directory and all its contents. Signature def rmtree ( self , ignore_errors : bool = True ) -> None : ... NicePath().walk find in source code Walk files except for exclude . Yields Existing Path. Signature def walk ( self : _R , exclude : Iterable [ Path ] = tuple (), glob_pattern : str = \"**/*\" ) -> Iterator [ _R ]: ... NicePath().write_changed find in source code Write content to file if it's changed. Signature def write_changed ( self , content : str , encoding : str ) -> bool : ...","title":"NicePath"},{"location":"handsdown/utils/nice_path/#nicepath","text":"Handsdown API Index / Handsdown / Utils / NicePath Auto-generated documentation for handsdown.utils.nice_path module.","title":"NicePath"},{"location":"handsdown/utils/nice_path/#nicepath_1","text":"find in source code Path that represents it as relative to workdir.","title":"NicePath"},{"location":"handsdown/utils/nice_path/#signature","text":"class NicePath ( type ( Path ())): ...","title":"Signature"},{"location":"handsdown/utils/nice_path/#nicepathrmtree","text":"find in source code Remove directory and all its contents.","title":"NicePath().rmtree"},{"location":"handsdown/utils/nice_path/#signature_1","text":"def rmtree ( self , ignore_errors : bool = True ) -> None : ...","title":"Signature"},{"location":"handsdown/utils/nice_path/#nicepathwalk","text":"find in source code Walk files except for exclude .","title":"NicePath().walk"},{"location":"handsdown/utils/nice_path/#yields","text":"Existing Path.","title":"Yields"},{"location":"handsdown/utils/nice_path/#signature_2","text":"def walk ( self : _R , exclude : Iterable [ Path ] = tuple (), glob_pattern : str = \"**/*\" ) -> Iterator [ _R ]: ...","title":"Signature"},{"location":"handsdown/utils/nice_path/#nicepathwrite_changed","text":"find in source code Write content to file if it's changed.","title":"NicePath().write_changed"},{"location":"handsdown/utils/nice_path/#signature_3","text":"def write_changed ( self , content : str , encoding : str ) -> bool : ...","title":"Signature"},{"location":"handsdown/utils/path_finder/","text":"PathFinder Handsdown API Index / Handsdown / Utils / PathFinder Auto-generated documentation for handsdown.utils.path_finder module. PathFinder find in source code Glob helper for matching paths inside root path. With .gitignore -like include and exclude patterns. Examples path_finder = PathFinder ( Path . cwd ()) list ( path_finder . glob ( '*.txt' )) [ 'my_new.txt' , 'my.txt' , 'new.txt' ] list ( path_finder . include ( 'my*' ) . glob ( '*.txt' )) [ 'my_new.txt' , 'my.txt' ] list ( path_finder . exclude ( '*new*' ) . glob ( '*.txt' )) [ 'my.txt' ] Arguments root - Path to root folder. glob_expr - glob expression to lookup in root Raises PathFinderError - If root is not absolute or not a directory. Signature class PathFinder : def __init__ ( self , root : Path ) -> None : ... PathFinder().exclude find in source code Add fnmatch expression to black list. If black list is empty - no black list filtration applied. If expression does not have * or . characters, appends /* to it. Arguments fn_exrps - One or more fnmatch expressions. Returns A copy of itself. Signature def exclude ( self : _R , * fn_exrps : str ) -> _R : ... PathFinder().glob find in source code Find all matching Path objects respecting PathFinder().include and PathFinder().exclude patterns. Yields Matching Path objects. Signature def glob ( self , glob_expr : str ) -> Iterator [ NicePath ]: ... PathFinder().include find in source code Add fnmatch expression to white list. If white list is empty - no white list filtration applied. If expression does not have * or . characters, appends /* to it. Arguments fn_exrps - One or more fnmatch expressions. Returns A copy of itself. Signature def include ( self : _R , * fn_exrps : str ) -> _R : ... PathFinder().mkdir find in source code Create directories up to root if they do not exist. Arguments force - Delete existing parent if it is not a directory. Raises PathFinderError - If any existing parent is not a directory and not in force mode. Signature def mkdir ( self , force : bool = False ) -> None : ... PathFinder().relative find in source code Find a relative path from root to target . target should be an absolute path. Arguments target - Target path. Returns A relative path to target . Signature def relative ( self , target : Path ) -> NicePath : ... See also NicePath","title":"PathFinder"},{"location":"handsdown/utils/path_finder/#pathfinder","text":"Handsdown API Index / Handsdown / Utils / PathFinder Auto-generated documentation for handsdown.utils.path_finder module.","title":"PathFinder"},{"location":"handsdown/utils/path_finder/#pathfinder_1","text":"find in source code Glob helper for matching paths inside root path. With .gitignore -like include and exclude patterns.","title":"PathFinder"},{"location":"handsdown/utils/path_finder/#examples","text":"path_finder = PathFinder ( Path . cwd ()) list ( path_finder . glob ( '*.txt' )) [ 'my_new.txt' , 'my.txt' , 'new.txt' ] list ( path_finder . include ( 'my*' ) . glob ( '*.txt' )) [ 'my_new.txt' , 'my.txt' ] list ( path_finder . exclude ( '*new*' ) . glob ( '*.txt' )) [ 'my.txt' ]","title":"Examples"},{"location":"handsdown/utils/path_finder/#arguments","text":"root - Path to root folder. glob_expr - glob expression to lookup in root","title":"Arguments"},{"location":"handsdown/utils/path_finder/#raises","text":"PathFinderError - If root is not absolute or not a directory.","title":"Raises"},{"location":"handsdown/utils/path_finder/#signature","text":"class PathFinder : def __init__ ( self , root : Path ) -> None : ...","title":"Signature"},{"location":"handsdown/utils/path_finder/#pathfinderexclude","text":"find in source code Add fnmatch expression to black list. If black list is empty - no black list filtration applied. If expression does not have * or . characters, appends /* to it.","title":"PathFinder().exclude"},{"location":"handsdown/utils/path_finder/#arguments_1","text":"fn_exrps - One or more fnmatch expressions.","title":"Arguments"},{"location":"handsdown/utils/path_finder/#returns","text":"A copy of itself.","title":"Returns"},{"location":"handsdown/utils/path_finder/#signature_1","text":"def exclude ( self : _R , * fn_exrps : str ) -> _R : ...","title":"Signature"},{"location":"handsdown/utils/path_finder/#pathfinderglob","text":"find in source code Find all matching Path objects respecting PathFinder().include and PathFinder().exclude patterns.","title":"PathFinder().glob"},{"location":"handsdown/utils/path_finder/#yields","text":"Matching Path objects.","title":"Yields"},{"location":"handsdown/utils/path_finder/#signature_2","text":"def glob ( self , glob_expr : str ) -> Iterator [ NicePath ]: ...","title":"Signature"},{"location":"handsdown/utils/path_finder/#pathfinderinclude","text":"find in source code Add fnmatch expression to white list. If white list is empty - no white list filtration applied. If expression does not have * or . characters, appends /* to it.","title":"PathFinder().include"},{"location":"handsdown/utils/path_finder/#arguments_2","text":"fn_exrps - One or more fnmatch expressions.","title":"Arguments"},{"location":"handsdown/utils/path_finder/#returns_1","text":"A copy of itself.","title":"Returns"},{"location":"handsdown/utils/path_finder/#signature_3","text":"def include ( self : _R , * fn_exrps : str ) -> _R : ...","title":"Signature"},{"location":"handsdown/utils/path_finder/#pathfindermkdir","text":"find in source code Create directories up to root if they do not exist.","title":"PathFinder().mkdir"},{"location":"handsdown/utils/path_finder/#arguments_3","text":"force - Delete existing parent if it is not a directory.","title":"Arguments"},{"location":"handsdown/utils/path_finder/#raises_1","text":"PathFinderError - If any existing parent is not a directory and not in force mode.","title":"Raises"},{"location":"handsdown/utils/path_finder/#signature_4","text":"def mkdir ( self , force : bool = False ) -> None : ...","title":"Signature"},{"location":"handsdown/utils/path_finder/#pathfinderrelative","text":"find in source code Find a relative path from root to target . target should be an absolute path.","title":"PathFinder().relative"},{"location":"handsdown/utils/path_finder/#arguments_4","text":"target - Target path.","title":"Arguments"},{"location":"handsdown/utils/path_finder/#returns_2","text":"A relative path to target .","title":"Returns"},{"location":"handsdown/utils/path_finder/#signature_5","text":"def relative ( self , target : Path ) -> NicePath : ...","title":"Signature"},{"location":"handsdown/utils/path_finder/#see-also","text":"NicePath","title":"See also"},{"location":"handsdown/utils/strings/","text":"Strings Handsdown API Index / Handsdown / Utils / Strings Auto-generated documentation for handsdown.utils.strings module. extract_md_title find in source code Extract title from the first line of content. If title is present - return a title and a remnaing content. if not - return an empty title and untouched content. Examples extract_md_title ( '# Title \\n content' ) ( 'Title' , 'content' ) extract_md_title ( 'no title \\n content' ) ( '' , 'no title \\n content' ) Returns A tuple fo title and remaining content. Signature def extract_md_title ( content : str ) -> Tuple [ str , str ]: ... make_title find in source code Convert pathlib.Path part or any other string to a human-readable title. Replace underscores with spaces and capitalize result. Examples make_title ( Path ( \"my_module/my_path.py\" ) . stem ) \"My Path\" make_title ( \"my_title\" ) \"My Title\" make_title ( \"__init__.py\" ) \"Init Py\" make_title ( Path ( \"my_module/__main__.py\" ) . stem ) \"Module\" Arguments file_stem - Stem from path. Returns A human-readable title as a string. Signature def make_title ( file_stem : str ) -> str : ...","title":"Strings"},{"location":"handsdown/utils/strings/#strings","text":"Handsdown API Index / Handsdown / Utils / Strings Auto-generated documentation for handsdown.utils.strings module.","title":"Strings"},{"location":"handsdown/utils/strings/#extract_md_title","text":"find in source code Extract title from the first line of content. If title is present - return a title and a remnaing content. if not - return an empty title and untouched content.","title":"extract_md_title"},{"location":"handsdown/utils/strings/#examples","text":"extract_md_title ( '# Title \\n content' ) ( 'Title' , 'content' ) extract_md_title ( 'no title \\n content' ) ( '' , 'no title \\n content' )","title":"Examples"},{"location":"handsdown/utils/strings/#returns","text":"A tuple fo title and remaining content.","title":"Returns"},{"location":"handsdown/utils/strings/#signature","text":"def extract_md_title ( content : str ) -> Tuple [ str , str ]: ...","title":"Signature"},{"location":"handsdown/utils/strings/#make_title","text":"find in source code Convert pathlib.Path part or any other string to a human-readable title. Replace underscores with spaces and capitalize result.","title":"make_title"},{"location":"handsdown/utils/strings/#examples_1","text":"make_title ( Path ( \"my_module/my_path.py\" ) . stem ) \"My Path\" make_title ( \"my_title\" ) \"My Title\" make_title ( \"__init__.py\" ) \"Init Py\" make_title ( Path ( \"my_module/__main__.py\" ) . stem ) \"Module\"","title":"Examples"},{"location":"handsdown/utils/strings/#arguments","text":"file_stem - Stem from path.","title":"Arguments"},{"location":"handsdown/utils/strings/#returns_1","text":"A human-readable title as a string.","title":"Returns"},{"location":"handsdown/utils/strings/#signature_1","text":"def make_title ( file_stem : str ) -> str : ...","title":"Signature"}]}