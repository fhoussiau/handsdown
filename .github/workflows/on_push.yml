name: Code style and test

on:
  push: {}
  workflow_dispatch: {}

jobs:
  unit-tests:
    name: Code style & unit tests
    runs-on: ubuntu-latest
    env:
      PIP_NO_CACHE_DIR: false
      PIP_USER: 1
      PYTHONUSERBASE: ${{ github.workspace }}/.cache/py-user-base
    strategy:
      max-parallel: 4
      matrix:
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
    steps:
      - name: Add PYTHONUSERBASE to PATH
        id: add-pythonuserbase
        run: |
          echo '${{ env.PYTHONUSERBASE }}/bin/' >> $GITHUB_PATH
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ matrix.python-version }}"
      - name: Set up Node.js
        id: node
        uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Cache packages
        uses: actions/cache@v2
        with:
          path: ${{ env.PYTHONUSERBASE }}
          key: ${{ steps.python.outputs.python-version }}-full-${{ secrets.CACHE_KEY }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ steps.python.outputs.python-version }}-full-${{ secrets.CACHE_KEY }}-
      - name: Install dependencies
        run: |
          python -m pip install -U poetry pip wheel
          poetry config virtualenvs.create false
          poetry install -n
          sudo npm install -g pyright
      - name: Code style
        run: |
          python -m black --check handsdown
          python -m isort -c handsdown
      - name: Lint
        run: |
          python -m flake8 handsdown
          python -m pylint handsdown
      - name: Typing
        run: |
          python -m mypy handsdown
          npx pyright
      - name: Test
        run: |
          python -m pytest
